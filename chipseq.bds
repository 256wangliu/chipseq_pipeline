#!/usr/bin/env bds

include "modules/species.bds"

help Input file definition (input: fastq, bam, nodup_bam, tag or peak)
input 		:= ""		help Input file type (automatically determined if not specified) (default: blank).

include "modules/fastq.bds"
include "modules/bam.bds"
include "modules/tagalign.bds"

help For IDR when starting pipeline from peaks. (-input peak)
peak1 		:= ""		help Peak 1
peak2 		:= ""		help Peak 2
pooled 		:= ""		help Pooled peak

include "modules/align_bwa.bds"

// for peak data set

help Subsampling tagligns
subsmpl_tag 	:= false 	help Add it if you want to subsample tagligns for cross corr. analysis (default: false).

help Alignment only mode. Define '-final_stage [bam,nodup_bam,tag,xcor]' and '-num_rep [NO_REPS]' (stage: fastq, bam, nodup_bam, tag or peak)
final_stage	:= "" 		help Final stage that pipeline stops after (default: blank).
num_rep 	:= 2		help # replicates, define '-final_stage' first. (default: 2).

help Peakcalling method (spp, macs2 and gem)
peakcall 	:= "spp"	help Choose peak calling method: spp, macs2 and gem (default: spp).

include "modules/peakcall_spp.bds"
include "modules/peakcall_macs2.bds"
include "modules/peakcall_gem.bds"
include "modules/idr.bds"

help Signal track generation method (aln2rawsig, macs2 and deeptools (or deep) )
sigtrk 		:= ""		help Choose signal track generation method: aln2rawsig, macs2 and deeptools (default: aln2rawsig).
make_wig 	:= false	help Add it to create wig (only for -sigtrk aln2rawsig) (default: false).
no_bw		:= false	help Add it not to create bigwig (default: false).

include "modules/signal.bds"
include "modules/report.bds"

num_ctl 	:= 1
html_rpt_title 	:= "ChIP-Seq Pipeline HTML Report"
html_rpt_file 	:= "Report.html"	



// Ugly global variables for peak calling (BDS cannot have return value for parallel function)
string tag_rep1, tag_rep1_pr1, tag_rep1_pr2
string tag_rep2, tag_rep2_pr1, tag_rep2_pr2

string ctl_tag_rep1, ctl_tag_rep2
string fraglen_rep1, fraglen_rep2



// chipseq pipeline starts here

help()

init_chipseq() // read configruation file if exists

chk_input_data() // check input files are valid

set_shell_env()

align() // align

peakcall_idr()

write_report()



void init_chipseq() {

	if ( conf_file_exists() ) {

		final_stage	= get_conf_val( final_stage, 		["FINAL_STAGE", "FINAL_OUT"] )
		num_rep 	= get_conf_val_int( num_rep, 		["NUM_REP", "NUMREP"] )

		input 		= get_conf_val( input, 			["INPUT_TYPE", "INPUT"] )

		peakcall	= get_conf_val( peakcall, 		["PEAKCALL_METHOD", "PEAKCALL"] )

		subsmpl_tag	= get_conf_val_bool( subsmpl_tag, 	["SUBSAMPLE_TAG", "SUBSMPL_TAG","SUBSAMPLE_TAGALIGN", "SUBSMPL_TAGALIGN"] )

		sigtrk 		= get_conf_val( sigtrk, 		["SIGTRK", "SIG_TRK", "SIGTRK_METHOD"] )
		make_wig	= get_conf_val_bool( make_wig, 		["CREATE_WIG", "MAKE_WIG"] )
		no_bw		= get_conf_val_bool( no_bw, 		["NO_BIGWIG", "NO_BW"] )

	}

	if ( v ) { // verbose
		print("\n")
		print( "Final stage for ChIP-Seq\t: $final_stage\n" )
		print( "# replicates to align\t\t: $num_rep\n" )
		print( "Input data type\t\t\t: $input\n")
		print( "Peak calling method\t\t: $peakcall\n" )
		print( "Subsampling for tagaligns\t: $subsmpl_tag\n")
		print( "Sig. trk. generation method\t: $sigtrk\n" )
		print( "Create wig\t\t\t: $make_wig\n" )
		print( "No bigwig\t\t\t: $no_bw\n" )
	}	

	out_dir = mkdir_path( out_dir ) // create output directory and get absolute path for it
}

void chk_input_data() {

	if ( input == "" ) {  // determine input type if input is not defined
		if ( get_peak(1) != "" ) 	input = "peak"
		if ( get_bam(0,1) != "" ) 	input = "bam"
		if ( get_tag(0,1) != "" ) 	input = "tag"
		if ( get_fastq(0,1,1) != "" ) 	input = "fastq"
	}

	if ( is_input_fastq() ) {
		if ( !("$bwa_idx.bwt").exists() ) error("\nBWA index doesn't exists! ($bwa_idx.bwt)\n")
	}

	if ( is_sigtrk_macs2() || is_peakcall_macs2() ) {
		if ( !chrsz.exists() ) error("\nChrome sizes file doesn't exists! ($chrsz)\n")	
	}

	if ( is_sigtrk_aln2rawsig() ) {
		if ( !umap.exists() ) error("\nUmap directory doesn't exists! ($umap)\n")
		if ( !("$seq/chr1.fa").exists() ) error("\nRef. sequence doesn't exists! ($seq/chr1.fa)\n")
	}

	if ( is_peakcall_gem() ) {
		if ( !chrsz.exists() ) error("\nChrome sizes file doesn't exists! ($chrsz)\n")	
		if ( !("$seq/chr1.fa").exists() ) error("\nRef. sequence doesn't exists! ($seq/chr1.fa)\n")
	}

	if ( is_align_only_mode() ) { 
		// if no data for control rep1 and final stage is before peak calling
		// this must be aligment only mode, so ignore all control from here

		print("\n\nAlign only mode for $num_rep replicates (no control data found)!\n\n")
		num_ctl = 0
	}
	else if ( num_rep > 2 ) {
		error("\n\nFor peak calling, # replicates (num_rep) should be <= 2.\n\n")
	}

	print( "\n====== Checking inputs (data type = $input) ...\n\n" );

	if ( is_input_peak() ) {

		pooled := get_peak(0)
		peak1 := get_peak(1)
		peak2 := get_peak(2)

		if ( pooled == "" ) error( "Pooled peak input file missing!\n")
		print( "\tPooled peak: $pooled\n")
		if ( !pooled.exists() ) \
			error( "\t\tFile not found!\n")

		if ( peak1 == "" ) error( "Peak 1 input file missing!\n")
		print( "\tPeak1: $peak1\n")
		if ( !peak1.exists() ) \
			error( "\t\tFile not found!\n")

		if ( peak2 == "" ) error( "Peak 2 input file missing!\n")
		print( "\tPeak2: $peak2\n")
		if ( !peak2.exists() ) \
			error( "\t\tFile not found!\n")	

		return
	}

	string[] data_all

	for ( int ctl=0; ctl <= num_ctl; ctl++) { // iterate through replicats (0: not control, 1~: controls)

		for ( int rep=1; rep <= num_rep; rep++) {

			string[] data

			prefix := (ctl==1) ? "Control " : ""
			suffix := is_paired_end( ctl, rep ) ? " (PE)" : " (SE)"

			if ( is_input_fastq() ) {
				prefix = prefix + "Rep$rep fastq" + suffix
				fastqs := get_fastqs( ctl, rep )
				if ( fastqs.size()==0 ) {
					data.push( "" )
				}
				else {
					for ( string fastq : fastqs ) data.push( fastq )
				}
			}
			else if ( is_input_bam() ) {
				prefix = prefix +"Rep$rep bam" + suffix
				data.push( get_bam( ctl, rep ) )
			}
			else if ( is_input_nodup_bam() ) {
				prefix = prefix +"Rep$rep nodup_bam" + suffix
				data.push( get_bam( ctl, rep ) )
			}
			else if ( is_input_tag() ) {
				prefix = prefix + "Rep$rep tagalign" + suffix
				data.push( get_tag( ctl, rep ) )
			}

			print("$prefix :\n")

			for ( string s : data ) {
				print("\t$s\n")
				if ( (s != "") && !(s.exists()) ) error("\t\tFile not found!\n")
			}

			// if data is missing
			if ( data[0] == "" ) {
				if ( (rep==2) && (ctl==1) ) \
					print( "\tWarning: Control $prefix missing! keep going...\n")
				else if ( (rep==2) && (ctl==0) ) \
					print( "\tWarning: $prefix missing! keep going... (peak claling for replicate 1 only)\n")
				else \
					error( "\t$prefix missing!\n")
				continue
			}

			// check any duplicate input filename
			for ( string s : data ) {
				if ( is_in_array( get_basename( s ), get_basename( data_all ) ) ) \
					error( "\t$prefix has duplicate filename!\n")
			}

			data_all = concat( data_all, data )
		}
	}

	if ( final_stage != "" ) \
		print( "\n====== Final stage : $final_stage \n\n" );
}

void align() {

	// parallel jobs for align() for each replicate and each control
	for ( int ctl=0; ctl <= num_ctl; ctl++) { // iterate through inputs (ctl==0 : input, ctl==1 : control)	
	
		for ( int rep=1; rep <= num_rep; rep++) {

			if ( !is_data_available( ctl, rep ) ) continue

			string[] data

			// suffix for task name
			info 	:= get_task_info( ctl, rep )

			// prepare data for align()
			if ( is_input_fastq() ) {
				
				data = get_fastqs( ctl, rep )
			}
			else if ( is_input_nodup_bam() ) {

				data = [ get_bam( ctl, rep ) ]
			}
			else if ( is_input_bam() ) {

				data = [ get_bam( ctl, rep ) ]
			}
			else if ( is_input_tag() ) {

				data = [ get_tag( ctl, rep ) ]
			}
			else {
				continue
			}

			if ( data.size() == 0 ) continue

			// align output directory structure
			align_out_dir := mkdir_path( "$out_dir/align_$info" )

			// align() : (ctl==1) is to determine if control or not, if control spr is excluded from align stage
			if ( is_single_ended( ctl, rep ) ) {
				
				if ( no_par_job ) \
					_align_bwa( data, input, final_stage, ctl, rep, align_out_dir, info ) // go serial 
				else \
					par _align_bwa( data, input, final_stage, ctl, rep, align_out_dir, info ) // go parallel
			}
			else {
				if ( no_par_job ) \
					_align_bwa_PE( data, input, final_stage, ctl, rep, align_out_dir, info ) // go serial 
				else \
					par _align_bwa_PE( data, input, final_stage, ctl, rep, align_out_dir, info ) // go parallel
			}
		}
	}

	wait

	write_report()
}

void peakcall_idr() {

	if ( is_align_only_mode() ) return

	if ( !is_final_stage_peak() && !is_final_stage_idr() ) return

	 // mkdir and get absolute path

	if ( is_input_peak() ) {

		peak_out_dir := mkdir_path( "$out_dir/peaks/" + use_idr1 ? "idr1" : "idr2" )
		pooled := get_peak(0); 	peak1  := get_peak(1); 	peak2  := get_peak(2)
				
		_idr( peak1, peak2, pooled, peak_out_dir, "IDR" )
		wait

		return
	}
	
	peak_out_dir := mkdir_path( "$out_dir/peaks"+"_$peakcall") // peak directory structure 

	rep_dir := mkdir_path( "$peak_out_dir/true_replicates" )
	pr_dir 	:= mkdir_path( "$peak_out_dir/pseudo_replicates" )
	ppr_dir := mkdir_path( "$peak_out_dir/pooled_pseudoreplicates" )

 	align_pooled_dir := mkdir_path( "$out_dir/align_pooled" )

	// create ppr (pooled pseudoreplicates) before peak calling

	string tag_pooled, tag_ppr1, tag_ppr2

	if ( num_rep > 1 ) {
		(tag_pooled, tag_ppr1, tag_ppr2 ) = _ppr( tag_rep1, tag_rep1_pr1, tag_rep1_pr2, \
							  tag_rep2, tag_rep2_pr1, tag_rep2_pr2, align_pooled_dir, "" ) // make pooled psudo replicate
		wait
	}

	string ctl_tag_pooled
	
	if ( is_data_available( 1, 2 ) ) { // if ctl_rep2 exists

		ctl_tag_pooled 	= _pool_tag( ctl_tag_rep1, ctl_tag_rep2, out_dir, "ctl" )
		wait
	}
	else { // otherwise, no pooling. just use ctl rep1 data
		ctl_tag_rep2 	= ctl_tag_rep1
		ctl_tag_pooled 	= ctl_tag_rep1
	}
	
	string fraglen_mean
	if ( num_rep > 1 ) {
		real frgln1 	= fraglen_rep1.parseReal() 
		real frgln2 	= fraglen_rep2.parseReal()
		fraglen_mean 	= round( (frgln1+frgln2)*0.5 ) // compute fraglen mean for pooled
	}

	// peak calling

	peak_rep1 := _peakcall( tag_rep1, ctl_tag_rep1, fraglen_rep1, rep_dir, "Rep1" )
	if ( no_par_job ) wait

	peak_rep1_pr1 := _peakcall( tag_rep1_pr1, ctl_tag_rep1, fraglen_rep1, pr_dir, "Rep1_PR1" )
	if ( no_par_job ) wait

	peak_rep1_pr2 := _peakcall( tag_rep1_pr2, ctl_tag_rep1, fraglen_rep1, pr_dir, "Rep1_PR2" )
	if ( no_par_job ) wait


	string peak_rep2, peak_rep2_pr1, peak_rep2_pr2, peak_pooled, peak_ppr1, peak_ppr2

	if ( num_rep > 1 ) {

		peak_rep2 = _peakcall( tag_rep2, ctl_tag_rep2, fraglen_rep2, rep_dir, "Rep2" )
		if ( no_par_job ) wait

		peak_rep2_pr1 = _peakcall( tag_rep2_pr1, ctl_tag_rep2, fraglen_rep2, pr_dir, "Rep2_PR1" )
		if ( no_par_job ) wait

		peak_rep2_pr2 = _peakcall( tag_rep2_pr2, ctl_tag_rep2, fraglen_rep2, pr_dir, "Rep2_PR2" )
		if ( no_par_job ) wait

		peak_pooled = _peakcall( tag_pooled, ctl_tag_pooled, fraglen_mean, rep_dir, "Pooled" )
		if ( no_par_job ) wait

		peak_ppr1 = _peakcall( tag_ppr1, ctl_tag_pooled, fraglen_mean, ppr_dir, "PPR1" )
		if ( no_par_job ) wait

		peak_ppr2 = _peakcall( tag_ppr2, ctl_tag_pooled, fraglen_mean, ppr_dir, "PPR2" )
		if ( no_par_job ) wait
	}

	wait

	if ( !is_final_stage_idr() || num_rep < 2 ) return

	// idr

	if ( is_peakcall_spp() || is_peakcall_gem() ) {

		idr_out_dir := mkdir_path( use_idr1 ? "$peak_out_dir/idr1" : "$peak_out_dir/idr2" )

		_idr( peak_rep1, peak_rep2, peak_pooled, idr_out_dir, "Rep1_vs_Rep2" )
		if ( no_par_job ) wait

		_idr( peak_ppr1, peak_ppr2, peak_pooled, idr_out_dir, "PPR1_vs_PPR2" )
		if ( no_par_job ) wait

		_idr( peak_rep1_pr1, peak_rep1_pr2, peak_rep1, idr_out_dir, "Rep1_PR1_vs_Rep1_PR2" )
		if ( no_par_job ) wait

		_idr( peak_rep2_pr1, peak_rep2_pr2, peak_rep2, idr_out_dir, "Rep2_PR1_vs_Rep2_PR2" )
	}

	wait
}

void _align_bwa( string[] data, string type, string final_stage, int ctl, int rep, string out_dir, string info ) {

	string bam, qc // make bam and map_qc with using bwa
	if ( is_data_type_before( type, "bam" ) ) {

		fastq := data[0]

		(bam, qc) = _bwa( fastq, out_dir, info )
		wait

		if ( final_stage.toLower() == "bam" ) return
	}

	string nodup_bam, nodup_bam_idx, nmsrt_bam // remove dupes and make nodup.bam and name sorted bam
	if ( is_data_type_before( type, "nodup_bam" ) ) {

		if ( type.toLower() == "bam" ) bam = data[0]

		(nodup_bam, nodup_bam_idx) = _bam_to_nodup_bam( bam, out_dir, info )
		wait

		if ( final_stage.toLower() == "nodup_bam" ) return
	}
	
	if ( is_sigtrk_deeptools() ) { // signal track generation (deeptools)

		if ( !no_bw ) {
			if ( nodup_bam != "" ) \
				bigwig := _nodup_bam_to_bw_bam_cvrg( nodup_bam, out_dir, info )
			else \
				print("\nWarning: Signal trk. generation with deepTools needs nodup_bam. Skipping...\n\n")
		}
	}

	string tag // make tagalign
	if ( is_data_type_before( type, "tag" ) ) {

		if ( type.toLower() == "nodup_bam" ) nodup_bam = data[0]

		tag = _bam_to_tag( nodup_bam, out_dir, info )
		wait

		if ( final_stage.toLower() == "tag" ) return
	}

	string xcor_score, xcor_plot // make cross correlation score and plot	
	if ( is_data_type_before( type, "xcor" ) ) {

		if ( type.toLower() == "tag" ) tag = data[0]

		string subsampled_tag

		if ( subsmpl_tag ) {
			subsampled_tag = _subsample_tag( tag, out_dir, info )
			wait
		}
		else {
			subsampled_tag = tag
		}

		(xcor_score, xcor_plot) = _xcor( subsampled_tag, out_dir, info )
		wait

	}

	fraglen := get_fraglen(xcor_score)

	if ( is_sigtrk_aln2rawsig() ) { // signal track generation (align2rawsignal)	

		_sigtrk_aln2rawsig( tag, fraglen, out_dir, info )
		//wait
	}

	if ( is_sigtrk_macs2() ) {

		if ( nodup_bam != "" ) \
			_sigtrk_macs2( nodup_bam, fraglen, out_dir, info )
		else \
			print("\nWarning: Signal trk. generation with macs2 needs nodup_bam. Skipping...\n\n")
		//wait
	}	

	if ( final_stage.toLower() == "xcor" ) return

	if ( ctl==0 ) {

		string tag_pr1, tag_pr2 // make self pseudo replicate
		(tag_pr1, tag_pr2) = _spr( tag, out_dir, info )
		wait

		if ( rep==1 ) {
			tag_rep1 = tag; 	tag_rep1_pr1 = tag_pr1; 	tag_rep1_pr2 = tag_pr2
			fraglen_rep1 = fraglen
		}
		if ( rep==2 ) {
			tag_rep2 = tag; 	tag_rep2_pr1 = tag_pr1; 	tag_rep2_pr2 = tag_pr2
			fraglen_rep2 = fraglen
		}
	}
	else {
		if ( rep==1 ) {
			ctl_tag_rep1 = tag
		}
		if ( rep==2 ) {
			ctl_tag_rep2 = tag
		}
	}	
}

void _align_bwa_PE( string[] data, string type, string final_stage, int ctl, int rep, string out_dir, string info ) {

	string bam, qc // make bam and map_qc with using bwa
	if ( is_data_type_before( type, "bam" ) ) {

		fastq1 := data[0]
		fastq2 := data[1]
		(bam, qc) = _bwa_PE( fastq1, fastq2, out_dir, info )
		wait

		if ( final_stage.toLower() == "bam" ) return
	}

	string nodup_bam, nodup_bam_idx // remove dupes and make nodup.bam
	if ( is_data_type_before( type, "nodup_bam" ) ) {

		if ( type.toLower() == "bam" ) bam = data[0]

		(nodup_bam, nodup_bam_idx) = _bam_to_nodup_bam_PE( bam, out_dir, info )
		wait

		if ( final_stage.toLower() == "nodup_bam" ) return
	}
	
	if ( is_sigtrk_deeptools() ) { // signal track generation (deeptools)

		if ( !no_bw ) {
			if ( nodup_bam != "" ) \
				bigwig := _nodup_bam_to_bw_bam_cvrg( nodup_bam, out_dir, info )
			else \
				print("\nWarning: Signal trk. generation with deepTools needs nodup_bam. Skipping...\n\n")
		}
	}

	string tag // make tagalign
	if ( is_data_type_before( type, "tag" ) ) {

		if ( type.toLower() == "nodup_bam" ) nodup_bam = data[0]

		tag = _bam_to_tag( nodup_bam, out_dir, info )
		wait

		if ( final_stage.toLower() == "tag" ) return
	}

	string bedpe, xcor_score, xcor_plot // make cross correlation score and plot	
	if ( is_data_type_before( type, "xcor" ) ) {

		string subsampled_tag

		if ( subsmpl_tag ) {

			if ( type.toLower() == "tag" ) {
				tag = data[0]

				subsampled_tag = _subsample_tag( tag, out_dir, info )
				wait
			}
			else {
				nmsrt_bam := _bam_to_nmsrt_bam( nodup_bam, out_dir, info )
				wait

				bedpe = _bam_to_bedpe( nmsrt_bam, out_dir, info )
				wait 

				subsampled_tag = _subsample_bedpe( bedpe, out_dir, info )
				wait
			}
		}
		else {
			subsampled_tag = tag			
		}

		(xcor_score, xcor_plot) = _xcor( subsampled_tag, out_dir, info )
		wait
	}

	fraglen := get_fraglen(xcor_score)

	if ( is_sigtrk_aln2rawsig() ) {

		_sigtrk_aln2rawsig( tag, fraglen, out_dir, info )
		//wait
	}

	if ( is_sigtrk_macs2() ) {

		if ( nodup_bam != "" ) \
			_sigtrk_macs2( nodup_bam, fraglen, out_dir, info )
		else \
			print("\nWarning: Signal trk. generation with macs2 needs nodup_bam. Skipping...\n\n")
		//wait
	}

	if ( final_stage.toLower() == "xcor" ) return

	if ( ctl==0 ) {

		string tag_pr1, tag_pr2 // make self pseudo replicate	

		if ( type.toLower() == "tag" ) { // if started from tag, we don't have bedpe file, use SE version
			(tag_pr1, tag_pr2) = _spr( tag, out_dir, info )	
		}
		else {
			(tag_pr1, tag_pr2) = _spr_PE( bedpe, out_dir, info )
		}
		wait

		if ( rep==1 ) {
			tag_rep1 = tag; 	tag_rep1_pr1 = tag_pr1; 	tag_rep1_pr2 = tag_pr2
			fraglen_rep1 = fraglen
		}
		if ( rep==2 ) {
			tag_rep2 = tag; 	tag_rep2_pr1 = tag_pr1; 	tag_rep2_pr2 = tag_pr2
			fraglen_rep2 = fraglen
		}
	}
	else {
		if ( rep==1 ) {
			ctl_tag_rep1 = tag
		}
		if ( rep==2 ) {
			ctl_tag_rep2 = tag
		}
	}
}

void _sigtrk_aln2rawsig( string tag, string fraglen, string out_dir, string info ) {
	
	if ( make_wig ) {

		_tag_to_wig_aln2rawsig( tag, fraglen, out_dir, info )
	}

	if ( !no_bw ) {

		prefix 	:= change_dir( remove_ext( tag, ["tagAlign","tag","bed"] ), out_dir )
		bigwig 	:= "$prefix.bigwig"

		in 	:= tag
		out 	:= bigwig

		if ( out <- in ) { // if bigwig is newer than tag
			bedgraph := _tag_to_bdg_aln2rawsig( tag, fraglen, out_dir, info )
			wait

			bigwig  = _bdg_to_bw( bedgraph, out_dir, info )
			wait

			bedgraph.rm()
		}
	}
}

void _sigtrk_macs2( string nodup_bam, string fraglen, string out_dir, string info ) {
	
	if ( !no_bw ) {
		prefix 		:= change_dir( remove_ext( nodup_bam, ["bam"] ), out_dir ) + ".nonchrM.tn5.pf"
		fc_bigwig 	:= "$prefix.fc.signal.bigwig"
		pval_bigwig 	:= "$prefix.pval.signal.bigwig"

		in 	:= nodup_bam
		out 	:= [ fc_bigwig, pval_bigwig ]

		if ( out <- in ) { // if bigwig is newer than tag

			bed := _bam_to_bed_non_chrM( nodup_bam, out_dir, info )
			wait
			
			string peakfile
			(peakfile, fc_bigwig, pval_bigwig ) = _macs2_bed( bed, fraglen, out_dir, info )

			bed.rm()
			peakfile.rm()
		}
	}
}

string _peakcall( string tag, string ctl_tag, string fraglen, string out_dir, string info ) {

	string peakfile, tmp

	if ( is_peakcall_spp() ) {
		(peakfile, tmp) = _spp( tag, ctl_tag, fraglen, out_dir, info )
	}
	else if ( is_peakcall_macs2() ) {
		(peakfile, tmp) = _macs2( tag, ctl_tag, fraglen, out_dir, info )
	}
	else if ( is_peakcall_gem() ) {
		(peakfile, tmp) = _gem( tag, ctl_tag, out_dir, info )
	}

	return peakfile
}

void write_report() {
	_write_report( html_rpt_title, "$out_dir/$html_rpt_file", out_dir )
}

void set_shell_env() {

	// set shell environments automatically
	dir_sw_BDS  := "$HOME/software_bds" // location of dependencies installed by the script "install_dependencies.sh"

	if ( kundaje_lab ) {

		print("\nAutomatically adding environment variables... (Kundaje lab cluster found) \n\n")

		SHCMD_INIT = SHCMD_INIT + " . /etc/profile.d/modules.sh; module add bwa/0.7.3 samtools/0.1.19 bedtools/2.19.1 ucsc_tools/3.0.9 picard-tools/1.92;" \
					+ " module add phantompeakqualtools/default idr/latest align2rawsignal/2.0 MACS2/2.1.0 java/latest r/2.15.1 gem/2.6 deepTools/latest;" \
					+ " export PATH=${PATH}:/software/idrCode; " \
					+ " export _JAVA_OPTIONS='-Xms256M -Xmx512M -XX:ParallelGCThreads=1'; export MAX_JAVA_MEM='8G'; export MALLOC_ARENA_MAX=4"

                SHCMD_INIT = SHCMD_INIT.replace( ";;", ";" )

	}
	else if ( dir_sw_BDS.exists() ) { // automatically add software binaries to shell env. vars like PATH

		print("\nFound ENCODE ChIP-Seq pipeline software directory ($dir_sw_BDS) \n")
		print("Automatically adding environment variables...\n\n")

		path := " export PATH=" \
			+ "$dir_sw_BDS/bwa-0.7.3:$dir_sw_BDS/samtools-0.1.19:$dir_sw_BDS/bedtools2-2.19.1/bin:" \
			+ "$dir_sw_BDS/ucsc_tools:$dir_sw_BDS/picard-tools-1.92:$dir_sw_BDS/R-2.15.1/bin:" \
			+ "$dir_sw_BDS/phantompeakqualtools:$dir_sw_BDS/idr/bin:$dir_sw_BDS/python3.4/bin:" \
			+ "$dir_sw_BDS/align2rawsignal/bin:$dir_sw_BDS/idrCode:$dir_sw_BDS/python2.7/bin:" \
			+ "$dir_sw_BDS/MACS/bin:$dir_sw_BDS/gem:$dir_sw_BDS/deepTools/bin" \
			+ "\${PATH}"

		shellcmd := "export PICARDROOT=$dir_sw_BDS/picard-tools-1.92; export LAPACK=$dir_sw_BDS/blas/lapack-*/liblapack.a; " \
				+ "export GEMROOT=$dir_sw_BDS/gem; export GEM=$dir_sw_BDS/gem/gem.jar; " \

		shellcmd = shellcmd \
			+ "MCRROOT=$dir_sw_BDS/MATLAB_Compiler_Runtime/v714;" \
			+ "LD_LIBRARY_PATH=\${LD_LIBRARY_PATH}:\${MCRROOT}/runtime/glnxa64;" \
			+ "LD_LIBRARY_PATH=\${LD_LIBRARY_PATH}:\${MCRROOT}/bin/glnxa64;" \
			+ "MCRJRE=\${MCRROOT}/sys/java/jre/glnxa64/jre/lib/amd64;" \
			+ "LD_LIBRARY_PATH=\${LD_LIBRARY_PATH}:\${MCRJRE}/native_threads;" \
			+ "LD_LIBRARY_PATH=\${LD_LIBRARY_PATH}:\${MCRJRE}/server;" \
			+ "LD_LIBRARY_PATH=\${LD_LIBRARY_PATH}:\${MCRJRE};" \
			+ "XAPPLRESDIR=\${MCRROOT}/X11/app-defaults;" \
			+ "export LD_LIBRARY_PATH;" \
			+ "export XAPPLRESDIR;"

		SHCMD_INIT = SHCMD_INIT + ";" + path + ";" + shellcmd
		SHCMD_INIT = SHCMD_INIT.replace( ";;", ";" )
	}

       
	if ( v ) { // verbose
		print( "\nShell cmd. for init. (chipseq.bds)\t: $SHCMD_INIT\n\n" )
	}
}

void help() {

	if ( is_cmd_line_arg_empty() ) {

		print(" Usage 1 (command line argument): example starting from two SE fastqs \n")
		print("\n")
		print("\t\$ bds chipseq.bds \\ \n")
		print("\t\t -fastq1 [FASTQ_REP1] \\ \n")
		print("\t\t -fastq2 [FASTQ_REP2] \\ \n")
		print("\t\t -bwa_idx [BWA_INDEX] \\ \n")
		print("\t\t ... \n")
		print("\n")
		print(" Usage 2 (configruation file): \n")
		print("\n")
		print("\t\$ bds chipseq.bds [CONF_FILE] \\ \n")
		print("\n")
		print("\t===[CONF_FILE] contents===\n")
		print("\tFASTQ1= [FASTQ_REP1]\n")
		print("\tFASTQ2= [FASTQ_REP2]\n")
		print("\tBWA_IDX= [BWA_INDEX]\n")
		print("\t\t ...\n")
		print("\n")
		print(" Usage 3 (command line argument using species database): For example, [SPECIES]= hg19 or mm9.\n")
		print("\n")
		print("\t\$ bds chipseq.bds \\ \n")
		print("\t\t -fastq1 [FASTQ_REP1] \\ \n")
		print("\t\t -fastq2 [FASTQ_REP2] \\ \n")
		print("\t\t -species [SPECIES] \\ \n")
		print("\t\t -species_file [SPECIES_FILE] \\ \n")
		print("\t\t ... \n")
		print("\n")
		print(" For Sun Grid Engine (SGE) cluster use\n")
		print("\n")
		print("\t\$ bds -s sge chipseq.bds ... \n")
		print("\n")
		print(" For Kundaje lab cluster use (this will automatically set shell environments and species file.)\n")
		print("\n")
		print("\t\$ bds -s sge chipseq.bds ... -kundaje_lab\n")
		print("\n")
		print(" Recommended software versions\n")
		print("\n")
		print("\tbwa/0.7.3; samtools/0.1.19; bedtools/2.19.1; ucsc_tools/3.0.9; picard-tools/1.92\n")
		print("\tphantompeakqualtools/1.1; align2rawsignal/2.0; MACS2/2.1.0; gem/2.6; \n")
		print("\tjava/8; r/2.15.1; python3/3.4; python2/2.7\n")
		print("\tspp_1.10.1 (R package);\n")
		print("\n")
		print(" List of parameters\n")
		print(" \n")
		printHelp()

		exit
	}
}

// misc. functions

bool is_peakcall_spp() {

	return peakcall.toLower()=="spp"
}

bool is_peakcall_gem() {

	return peakcall.toLower()=="gem"
}

bool is_peakcall_macs2() {

	return peakcall.toLower()=="macs2"
}

string get_peak( int rep ) { // rep0 = pooled peak

	key := ( rep == 0 ? "pooled" : ("peak_rep" + rep) )
	key2 := ( rep == 0 ? "pooled" : ("peak" + rep) )

	if ( conf.hasKey( key ) ) {
		return get_path( conf{ key } )
	}
	else if ( conf.hasKey( key2 ) ) {
		return get_path( conf{ key2 } )
	}
	else if ( rep==1 ) {
		return peak1
	}
	else if ( rep==2 ) {
		return peak2
	}
	else if ( rep==0 ) {
		return pooled
	}
	return ""
}

bool is_align_only_mode() {

	return !is_input_peak() && !is_data_available( 1, 1 )
}

bool is_paired_end( int ctl, int rep ) {

	if ( is_input_fastq() ) {
		fastqs := get_fastqs( ctl, rep )
		return fastqs.size()==2
	}
	else if ( is_input_bam() || is_input_nodup_bam() ) {		
		return is_bam_PE( ctl, rep )
	}
	else if ( is_input_tag() ) {
		return is_tag_PE( ctl, rep )
	}
	return false;
}

bool is_single_ended( int ctl, int rep ) {

	if ( is_input_fastq() ) {
		fastqs := get_fastqs( ctl, rep )
		return fastqs.size()==1
	}
	else if ( is_input_bam() || is_input_nodup_bam()  ) {
		return is_bam_SE( ctl, rep )
	}
	else if ( is_input_tag() ) {
		return is_tag_SE( ctl, rep )
	}
	return false;
}

bool is_input_fastq() {

	return input.toLower() == "fastq"
}

bool is_input_bam() {

	return input.toLower() == "bam"
}

bool is_input_nodup_bam() {

	return input.toLower() == "nodup_bam"
}

bool is_input_tag() {

	return input.toLower() == "tag" || input.toLower() == "tagalign"
}

bool is_input_peak() {

	return input.toLower() == "peak"
}

bool is_final_stage_bam() {

	return final_stage.toLower() == "bam"
}

bool is_final_stage_nodup_bam() {

	return final_stage.toLower() == "nodup_bam"
}

bool is_final_stage_tag() {

	return final_stage.toLower() == "tag" || final_stage.toLower() == "tagalign"
}

bool is_final_stage_xcor() {

	return final_stage.toLower() == "xcor"
}

bool is_final_stage_peak() {

	return final_stage.toLower() == "peak"
}

bool is_final_stage_idr() {

	return (final_stage.toLower() == "idr") || (final_stage.toLower() == "")
}

bool is_final_stage_before_nodup_bam() {

	return is_final_stage_bam()
}

bool is_final_stage_before_tag() {

	return is_final_stage_bam() || is_final_stage_nodup_bam()
}

bool is_final_stage_before_xcor() {

	return is_final_stage_bam() || is_final_stage_nodup_bam() || is_final_stage_tag()
}

bool is_final_stage_before_peak() {

	return is_final_stage_bam() || is_final_stage_nodup_bam() || is_final_stage_tag() \
		|| is_final_stage_xcor()
}

bool is_final_stage_before_idr() {

	return is_final_stage_bam() || is_final_stage_nodup_bam() || is_final_stage_tag() \
		|| is_final_stage_xcor() || is_final_stage_peak()
}

bool is_data_type_before( string type, string stage ) {

	if ( stage.toLower() == "bam" ) {
		return is_in_array( type, ["fastq"] )
	}
	else if ( stage.toLower() == "nodup_bam" ) {
		return is_in_array( type, ["fastq","bam"] )
	}
	else if ( stage.toLower() == "tag" || stage.toLower() == "tagalign" ) {
		return is_in_array( type, ["fastq","bam","nodup_bam"] ) 	
	}
	else if ( stage.toLower() == "xcor" ) {
		return is_in_array( type, ["fastq","bam","nodup_bam","tag","tagalign"] )
	}

	return false
}

string get_task_info( int ctl, int rep ) {

	return ( (ctl>0) ? "ctl_" : "") + "rep" + rep
}

bool is_data_available( int ctl, int rep ) {

	if ( (ctl==1) && (rep>2) ) return false

	if ( is_input_fastq() ) {
		return get_fastqs( ctl, rep ).size() > 0
	}
	else if ( is_input_bam() || is_input_nodup_bam() ) {
		return get_bam( ctl, rep ) != ""
	}
	else if ( is_input_tag() ) {
		return get_tag( ctl, rep ) != ""
	}
	else {
		return false
	}
}

bool is_sigtrk_aln2rawsig() {

	return sigtrk.toLower().startsWith( "aln2" ) || sigtrk.toLower().startsWith( "align" )
}

bool is_sigtrk_macs2() {

	return sigtrk.toLower().startsWith( "macs2" )
}

bool is_sigtrk_deeptools() {

	return sigtrk.toLower().startsWith( "deep" )
}
