#!/usr/bin/env bds
#vim: syntax=java

include "species.bds"
include "report.bds"


// bowtie + csem

help == align bowtie settings (requirements: -bwt_idx)
//help *resources :
nth_bwt		:= 2 		help # threads for bowtie (default: 2).
wt_bwt		:= "23h"	help Walltime for bowtie (default: 23h, 23:00:00).
mem_bwt		:= "12G"	help Max. memory for bowtie (default: 8G).


init_align_bwt()


void init_align_bwt() {

	nth_bwt 	= get_conf_val_int( nth_bwt,	["nth_bwt"] )
	wt_bwt 		= get_conf_val( wt_bwt, 	["wt_bwt"] )
	mem_bwt 	= get_conf_val( mem_bwt,	["mem_bwt"] )

	print("\n\n== align bowtie settings\n")
	print( "# threads (bowtie)\t: $nth_bwt\n")
	print( "Walltime (bowtie)\t: $wt_bwt\n")
	print( "Max. memory (bowtie)\t: $mem_bwt\n")
}

void chk_align_bwt() {

	if ( !path_exists("$bwt_idx.1.ebwt") ) error("bowtie index (-bwt_idx) doesn't exists! (file: $bwt_idx.1.ebwt)\n")
}

string[] _bowtie( string fastq, string o_dir, string info ) {

	prefix 	:= replace_dir( rm_ext( fastq, ["fastq","fq"] ), o_dir )
	bam 	:= "$prefix.bam"
	log 	:= "$prefix.align.log"

	in 	:= [ fastq ]
	out 	:= [ bam, log ]

	taskName:= "bowtie "+info
	cpus 	:= nth_bwt; 	mem := get_res_mem(mem_bwt); 	timeout := get_res_wt(wt_bwt)

	task( out<-in ) {

		sys $shcmd_init

		sys bowtie -q -v 2 -a -m 99 -p $nth_bwt -S $bwt_idx <(zcat -f $fastq) 2> $log | \
			samtools view -bS - | samtools sort - $prefix

		sys samtools index $bam			
	}

	wait_par()

	return out
}

string[] _bowtie_csem( string fastq, string o_dir, string info ) {

	prefix 		:= replace_dir( rm_ext( fastq, ["fastq","fq"] ), o_dir )
	sam 		:= "$prefix.sam"
	log 		:= "$prefix.align.log"
	srt_bam		:= "$prefix.csem.sorted.bam"
	srt_bam_prefix 	:= "$prefix.csem"
	bam 		:= "$prefix.csem.bam"

	in 	:= [ fastq ]
	out 	:= [ bam, log ]

	taskName:= "bowtie_csem "+info
	cpus 	:= nth_bwt; 	mem := get_res_mem(mem_bwt); 	timeout := get_res_wt(wt_bwt)

	task( out<-in ) {

		sys $shcmd_init

		sys bowtie -q -v 2 -a -m 99 -p $nth_bwt -S $bwt_idx <(zcat -f $fastq) 2> $log > $sam

		sys run-csem --sam -p $nth_bwt $sam 200 $srt_bam_prefix

		sys mv $srt_bam $bam
		sys samtools index $bam

		sys rm -f $sam
	}

	wait_par()

	return out
}
