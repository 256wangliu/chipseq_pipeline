#!/usr/bin/env bds
#vim: syntax=java

include "species.bds"
include "report.bds"


help == align bwa settings (requirements: -bwa_idx)
param_bwa_aln	:= "-q 5 -l 32 -k 2" 	help Parameters for bwa aln (default: "-q 5 -l 32 -k 2").
//help *resources
nth_bwa_aln	:= 2 			help # threads for bwa aln (default: 2).
wt_bwa_aln	:= "23h"		help Walltime for bwa aln (default: 23, 23:00:00).
mem_bwa_aln	:= "10G"	 	help Max. memory for bwa aln (default: 10G).
wt_bwa_sam	:= "23h"		help Walltime for bwa sampe/samse (default: 23h, 23:00:00).
mem_bwa_sam	:= "12G"		help Max. memory for bwa sampe/samse (default: 12G).


init_align_bwa()


void init_align_bwa() {

	param_bwa_aln 	= get_conf_val( param_bwa_aln, 		["param_bwa_aln"] )
	nth_bwa_aln 	= get_conf_val_int( nth_bwa_aln,	["nth_bwa_aln"] )
	wt_bwa_aln 	= get_conf_val( wt_bwa_aln, 		["wt_bwa_aln"] )
	mem_bwa_aln 	= get_conf_val( mem_bwa_aln, 		["mem_bwa_aln"] )
	wt_bwa_sam 	= get_conf_val( wt_bwa_sam, 		["wt_bwa_sam"] )
	mem_bwa_sam 	= get_conf_val( mem_bwa_sam, 		["mem_bwa_sam"] )

	print("\n\n== align bwa settings\n")
	print( "Param. for bwa aln\t: $param_bwa_aln\n")
	print( "# threads (bwa aln)\t: $nth_bwa_aln\n")
	print( "Walltime (bwa aln)\t: $wt_bwa_aln\n")
	print( "Max. memory (bwa aln)\t: $mem_bwa_aln\n")
	print( "Walltime (bwa sam)\t: $wt_bwa_sam\n")
	print( "Max. memory (bwa sam)\t: $mem_bwa_sam\n")
}

void chk_align_bwa() {

	if ( !path_exists("$bwa_idx.bwt") ) error("\nBwa index (-bwa_idx) doesn't exists! (file: $bwa_idx.bwt)\n")
}

string[] _bwa( string fastq, string o_dir, string log_o_dir, string label ) {

	prefix 	:= replace_dir( rm_ext( fastq, ["fastq","fq"] ), o_dir )
	prefix2 := replace_dir( prefix, log_o_dir )
	bam 	:= "$prefix.bam"
	qc 	:= "$prefix2.flagstat.qc"

	in 	:= [ fastq ]
	out 	:= [ bam, qc ]

	if ( out <- in ) { // compare file timestamps of in and out (to check if job is already done or not)

		sai := _bwa_aln( fastq, o_dir, label )
		wait

		_bwa_sam( fastq, sai, o_dir, log_o_dir, label )
		wait

		sai.rm() // delete intermediate file sai		
	}

	_add_to_graphviz( ["fastq_($label)"], [fastq], ["bam_($label)"], [bam], "bwa_($label)", grp_color_bwa )
	_add_to_filetable( ["L1_align/$label/bam"], [bam] )

	wait_par()

	return out
}

string[] _bwa_PE( string fastq1, string fastq2, string o_dir, string log_o_dir, string label ) {

	prefix 	:= replace_dir( rm_ext( fastq1, ["fastq","fq"] ), o_dir ) + ".PE2SE"
	prefix2 := replace_dir( prefix, log_o_dir )
	bam 	:= "$prefix.bam"
	qc 	:= "$prefix2.flagstat.qc"

	in 	:= [ fastq1, fastq2 ]
	out 	:= [ bam, qc ]

	if ( out <- in ) { // compare file timestamps of in and out (to check if job is already done or not)

		// parallel jobs
		sai1 := _bwa_aln( fastq1, o_dir, label+"_1" ) 
		sai2 := _bwa_aln( fastq2, o_dir, label+"_2" )

		wait

		_bwa_sam_PE( fastq1, fastq2, sai1, sai2, o_dir, log_o_dir, label )
		wait
		
		sai1.rm() // delete intermediate file sai1, sai2
		sai2.rm()
	}

	wait_par()

	_add_to_graphviz( ["fastq1_($label)", "fastq2_($label)"], [fastq1,fastq2], ["bam_($label)"], [bam], "bwa_($label)", grp_color_bwa )
	_add_to_filetable( ["L1_align/$label/bam"], [bam] )

	return out
}

string _bwa_aln( string fastq, string o_dir, string label ) {

	prefix 	:= replace_dir( rm_ext( fastq, "fastq" ), o_dir )
	sai 	:= "$prefix.sai"	
	
	in 	:= [ fastq ]
	out 	:= sai

	taskName:= "bwa_aln " + label
	cpus 	:= nth_bwa_aln;	mem := get_res_mem(mem_bwa_aln); timeout := get_res_wt(wt_bwa_aln)

	task( out<-in ) {

		sys $shcmd_init

		//# Map reads to create raw SAM file
		sys bwa aln $param_bwa_aln -t $nth_bwa_aln $bwa_idx $fastq > $sai
	}

	wait_par()

	return out
}

string[] _bwa_sam( string fastq, string sai, string o_dir, string log_o_dir, string label ) {

	prefix 	:= replace_dir( rm_ext( fastq, "fastq" ), o_dir )
	prefix2 := replace_dir( prefix, log_o_dir )
	bam 	:= "$prefix.bam"
	qc	:= "$prefix2.flagstat.qc"

	in 	:= [ fastq, sai ]
	out 	:= [ bam, qc ]

	taskName:= "bwa_sam " + label
	mem 	:= get_res_mem(mem_bwa_sam);	timeout:= get_res_wt(wt_bwa_sam)

	task( out<-in ) {

		sys $shcmd_init

		sys bwa samse $bwa_idx $sai $fastq | samtools view -Su - | samtools sort - $prefix
		sys samtools index $bam
		sys samtools flagstat $bam > $qc
	}

	wait_par()

	return out
}

string[] _bwa_sam_PE( string fastq1, string fastq2, string sai1, string sai2, string o_dir, string log_o_dir, string label ) {

	prefix 	:= replace_dir( rm_ext( fastq1, "fastq" ), o_dir ) + ".PE2SE"
	prefix2 := replace_dir( prefix, log_o_dir )
	sam 	:= "$prefix.sam"
	badcigar:= "$prefix.badReads"
	bam 	:= "$prefix.bam"
	qc	:= "$prefix2.flagstat.qc"

	in 	:= [ fastq1, fastq2, sai1, sai2 ]
	out 	:= [ bam, qc ]

	taskName:= "bwa_sam_PE " + label
	mem 	:= get_res_mem(mem_bwa_sam);	timeout := get_res_wt(wt_bwa_sam)

	task( out<-in ) {

		sys $shcmd_init
		
		sys bwa sampe $bwa_idx $sai1 $sai2 $fastq1 $fastq2 | gzip -c > $sam

		//# Remove read pairs with bad CIGAR strings and sort by position                                                                

		//# Find bad CIGAR read names                                                                                                                                                  
		sys zcat $sam \
			| awk 'BEGIN {FS="\t" ; OFS="\t"} ! /^@/ && $6!="*" { cigar=$6; gsub("[0-9]+D","",cigar); n = split(cigar,vals,"[A-Z]"); s = 0; for (i=1;i<=n;i++) s=s+vals[i]; seqlen=length($10) ; if (s!=seqlen) print $1"\t"; }' \
			| sort | uniq > $badcigar

		//# Remove bad CIGAR read pairs
		sys if [ $(cat $badcigar | wc -l) -gt 0 ]; then \
				zcat $sam | grep -v -F -f $badcigar | samtools view -Su - | samtools sort - $prefix; \
			else \
				samtools view -Su $sam | samtools sort - $prefix; \
			fi

		sys samtools flagstat $bam > $qc
		sys samtools index $bam
		sys rm -f $badcigar $sam
	}

	wait_par()

	return out
}
