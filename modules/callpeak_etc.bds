#!/usr/bin/env bds
#vim: syntax=java

include "species.bds"



string _naive_overlap_thresh( string filetype, string peak_pooled, string peak_rep1, string peak_rep2, \
				string peak_ppr1, string peak_ppr2, string out_dir, string info ) {

	prefix 	:= change_dir( remove_ext( peak_pooled, ["narrowPeak","narrowpeak","broadPeak","broadpeak","gappedPeak","gappedpeak",filetype] ), out_dir )

	peak_PooledInRep1AndRep2 	:= "$prefix.PooledInRep1AndRep2.$filetype.gz"
	peak_PooledInPsRep1AndPsRep2 	:= "$prefix.PooledInPsRep1AndPsRep2.$filetype.gz"

	peak_final 			:= "$prefix.naive_overlap_thresh.$filetype.gz"

	string awk_param

	if ( filetype.toLower() == "narrowpeak") {

		awk_param = "{s1=$3-$2; s2=$13-$12; if (($21/s1 >= 0.5) || ($21/s2 >= 0.5)) {print $0}}"
	}
	else if ( filetype.toLower() == "broadpeak") { 

		awk_param = "{s1=$3-$2; s2=$12-$11; if (($19/s1 >= 0.5) || ($19/s2 >= 0.5)) {print $0}}"
	}
	else if ( filetype.toLower() == "gappedpeak") { 

		awk_param = "{s1=$3-$2; s2=$18-$17; if (($31/s1 >= 0.5) || ($31/s2 >= 0.5)) {print $0}}"
	}
	else {
		error("Unsupport peak file type! ($filetype)\n")
	}

	in 	:= [ peak_pooled, peak_rep1, peak_rep2, peak_ppr1, peak_ppr2 ]
	out 	:= peak_final

	task( taskName:= "naive_overlap_thresh "+info, \
		cpus:=nth, mem:=parse_mem_or_skip(memory), timeout:=parse_time_or_skip(wt), \
		out<-in ) {

		sys $SHCMD_INIT

		//# Find pooled peaks that overlap Rep1 and Rep2 where overlap is defined as the fractional overlap wrt any one of the overlapping peak pairs  >= 0.5
		sys intersectBed -wo -a $peak_pooled -b $peak_rep1 | \
			awk 'BEGIN{FS="\t";OFS="\t"} $awk_param' | cut -f 1-10 | sort | uniq | \
			intersectBed -wo -a stdin -b $peak_rep2 | \
			awk 'BEGIN{FS="\t";OFS="\t"} $awk_param' | cut -f 1-10 | sort | uniq | gzip -c > $peak_PooledInRep1AndRep2

		//# Find pooled peaks that overlap PseudoRep1 and PseudoRep2 where overlap is defined as the fractional overlap wrt any one of the overlapping peak pairs  >= 0.5
		sys intersectBed -wo -a $peak_pooled -b $peak_ppr1 | \
			awk 'BEGIN{FS="\t";OFS="\t"} $awk_param' | cut -f 1-10 | sort | uniq | \
			intersectBed -wo -a stdin -b $peak_ppr2 | \
			awk 'BEGIN{FS="\t";OFS="\t"} $awk_param' | cut -f 1-10 | sort | uniq | gzip -c > $peak_PooledInPsRep1AndPsRep2

		//# Combine peak lists
		sys zcat $peak_PooledInRep1AndRep2 $peak_PooledInPsRep1AndPsRep2 | sort | uniq | gzip -c > $peak_final

		sys rm -f $peak_PooledInRep1AndRep2 $peak_PooledInPsRep1AndPsRep2
	}

	wait_par()

	return peak_final
}

string _naive_overlap_thresh_narrowpeak( string peak_pooled, string peak_rep1, string peak_rep2, \
					 string peak_ppr1, string peak_ppr2, string out_dir, string info ) {

	return _naive_overlap_thresh( "narrowpeak", peak_pooled, peak_rep1, peak_rep2, peak_ppr1, peak_ppr2, out_dir, info )
}

string _naive_overlap_thresh_broadpeak( string peak_pooled, string peak_rep1, string peak_rep2, \
					 string peak_ppr1, string peak_ppr2, string out_dir, string info ) {

	return _naive_overlap_thresh( "broadpeak", peak_pooled, peak_rep1, peak_rep2, peak_ppr1, peak_ppr2, out_dir, info )
}

string _naive_overlap_thresh_gappedpeak( string peak_pooled, string peak_rep1, string peak_rep2, \
					 string peak_ppr1, string peak_ppr2, string out_dir, string info ) {

	return _naive_overlap_thresh( "gappedpeak", peak_pooled, peak_rep1, peak_rep2, peak_ppr1, peak_ppr2, out_dir, info )
}