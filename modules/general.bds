#!/usr/bin/env bds

include "conf.bds"


help General pipeline settings

v 		:= true 	help Verbose (default: true).
out_dir 	:= "out"	help Output directory. (default: out).
no_par_job	:= false	help Add it to serialize all jobs for desktops with limited resources (default: false).

help General cluster resource settings

nth		:= 1 		help # threads for all cluster jobs (default: 1).
wt 		:= "11h"	help Walltime for all cluster jobs (example: 8:10:00, 3h, 3600, default: 11h, 11:00:00).
mem 		:= "8G"		help Max. memory for all cluster jobs (example: 8G, 1000MB, default: 8G).

help Shell environment settings

mod 		:= ""		help Modules separated by ; (example: "bowtie/2.2.4; bwa/0.7.7; picard-tools/1.92").
shcmd 		:= ""		help Shell cmds separated by ;. Shell var. must be written as ${VAR} not as $VAR (example: "export PATH=${PATH}:/usr/test; VAR=test"). 
addpath 	:= "" 		help Path separated by ; or : to be PREPENDED to \$PATH (example: "/bin/test:${HOME}/utils").


init_mods 	:= ["/etc/profile.d/modules.sh", "/etc/profile.d/modules.bash"] // environment modules (bash) initialization file paths (pick from the first if exists)
init_paths 	:= ["/bin","/usr/bin","/usr/local/bin"] // basic unix paths and BigDataScript bin path (pick all)

hostname_kundaje:= ["nandi.stanford.edu","mitra.stanford.edu","kali.stanford.edu","vayu.stanford.edu",\
		    "wotan.stanford.edu","durga.stanford.edu","amold.stanford.edu","dhara.stanford.edu"]
// get full hostname including domain name (http://serverfault.com/questions/367141/how-to-get-the-fully-qualified-name-fqn-on-unix-in-a-bash-script)
hostname 	:= get_stdout("fqn=$(host -TtA $(hostname)|grep 'has address'|awk '{print $1}'); if [[ '${fqn}' == '' ]] ; then fqn=$(hostname) ; fi ; echo ${fqn}").replace("\n","") // get host name

init_mod 	:= "" // module init. shell script found
SHCMD_INIT 	:= ""  // IMPORTANT! Shell command executed prior to all BigDataScript tasks (use this for setting environemts)



init_base()
init_shell_env()
print_cmd_line_params() 


void init_base() { 

	if ( conf_file_exists() ) {

		// read conf values for basic variables defined in base.bds
		v		= get_conf_val_bool( v,			["v","verbose"] )

		out_dir 	= get_conf_val( out_dir, 		["output_dir", "out_dir", "outdir"] )	
		no_par_job 	= get_conf_val_bool( no_par_job, 	["no_parallel_job","no_par_job"] )

		nth 		= get_conf_val_int( nth, 		["nthreads","nth","cpu"] )
		wt 		= get_conf_val( wt, 			["walltime","wt","timeout"] )
		mem 		= get_conf_val( mem, 			["memory","mem"] )
	}

	if ( v ) { // verbose
		print("\n")
		print( "Output dir.\t\t: $out_dir\n" )
		print( "No parallel jobs\t: $no_par_job\n" )
		print( "# threads (general)\t: $nth\n" )
		print( "Walltime (general)\t: $wt\n" )
		print( "Max. memory (general)\t: $mem\n" )
	}
}

void init_shell_env() {	

	// get shell var MODULESHOME if exists

	MODULESHOME := get_shell_var("MODULESHOME").replace("\n","")
	if (MODULESHOME!="") init_mods.add("$MODULESHOME/init/bash")

	// init shell environments

	string shellcmd, module, path

	// find env. modules init script
	for ( string file : init_mods ) {
		if ( file.exists() ) {
			init_mod = file
			break
		}
	}

	if ( init_mod == "" ) {
		print("\n\nInfo: Environments module not found on your system (e.g. /etc/profile.d/modules.sh). Ignoring shell env. parameters like '-mod'. \n")
	}

	if ( conf_file_exists() ) {
		for( string k : conf.keys() ) {		
			string val = conf{k}	

			// concat. module
			if ( (k.indexOf("mod_")>=0) || (k=="mod") ) {

				if ( init_mod != "" ) {
					trimmed := val.trim().replace("module add ","").replace( ":", " " ).replace( ";", " " ).replace( ",", " " ).trim()
					trimmed = trimmed.replace( "   ", " ").replace( "  ", " ")
					module = module + " " + trimmed
				}
			}
			else if ( k.indexOf("shcmd")>=0 ) {

				shellcmd = shellcmd + " " + val + ";"
			}
			else if ( k.indexOf("addpath")>=0 ) {

				path = path + val.trim().replace(",",":").replace(";",":").replace(" ",":").replace(":::",":").replace("::",":") + ":"
			}
		}
	}

	if ( mod!="" ) {
		string module_header = ". $init_mod;"

		if ( init_mod != "" ) { // if /etc/profile.d/modules.sh exists

			trimmed := mod.trim().replace("module add ","").replace( ":", " " ).replace( ";", " " ).replace(","," " ).trim()
			trimmed = trimmed.replace( "   ", " ").replace( "  ", " ")
			module = module + " " + trimmed
		}
	}
	if ( shcmd!="" ) {
		shellcmd = shellcmd + shcmd.trim() + "; "
	}

	if ( addpath!="" ) {
		path = path + addpath.trim().replace(",",":").replace(";",":").replace(" ",":").replace(":::",":").replace("::",":") + ":"
	}

	// finally concat all

	if ( module !="" ) {
		module = ". $init_mod; module add " + module + ";"
	}

	// check directories to add to PATH
	script_file_paths := get_script_file_paths()

	paths_to_find := concat( script_file_paths, init_paths )

	for ( string _path : paths_to_find ) {
		
		if ( _path.exists() ) {
			path = path + _path + ":"
		}
	}

	if ( path !="" ) {
		path = "export PATH=$path:\${HOME}/.bds:\${PATH}; "
	}

	// additional initialization
	SHCMD_INIT = SHCMD_INIT + shellcmd + path + module
	SHCMD_INIT = SHCMD_INIT.replace( "::", ":" )
	SHCMD_INIT = SHCMD_INIT.replace( ";;", ";" )

	if ( v ) { // verbose
		print( "Shell cmd. for init.\t: $SHCMD_INIT\n" )
	}		
}

void print_cmd_line_params() {

	string line
	for ( string arg : args ) {
		line = line + arg + " "
	}

	if ( args.size() > 0 ) {

		print( "\nCommand line arguments\t: $line\n\n")

		sys DATE=$(date "+%Y%m%d_%H%M%S"); echo $line > cmd_line_parameters.${DATE}.txt
	}
}

bool is_scg3() {
	name := hostname.toLower()
	return name.startsWith( "scg3" ) && name.endsWith( ".stanford.edu" )
}

bool is_kundaje_lab() {

	if ( is_scg3() ) return true

	for ( string name : hostname_kundaje ) {
		if ( hostname.toLower() == name ) return true
	}
	return false
}