#!/usr/bin/env bds
#vim: syntax=java

include "conf.bds"


help == general pipeline settings
out_dir 	:= "out"	help Output directory (default: out).
no_par		:= false	help Serialize all jobs (individual job can still take multiple threads).
nth		:= 1 		help Default # threads for all cluster jobs (default: 1).
wt 		:= "11h"	help Default Walltime for all cluster jobs (example: 8:10:00, 3h, 3600, default: 11h, 11:00:00).
memory 		:= "8G"		help Default Maximum memory for all cluster jobs (example: 8G, 1000MB, default: 8G).
use_sys_default	:= false 	help Use system default resource settings of your computer/cluster.

help == shell environment settings
mod 		:= ""		help Modules separated by ; (example: "bowtie/2.2.4; bwa/0.7.7; picard-tools/1.92").
shcmd 		:= ""		help Shell commands separated by ;. Shell var. must be written as ${VAR} not as $VAR (example: "export PATH=${PATH}:/usr/test; VAR=test"). 
addpath 	:= "" 		help Path separated by ; or : to be PREPENDED to \$PATH (example: "/bin/test:${HOME}/utils").


// system var (do not touch)
init_mod 	:= "" // module init. shell script found
SHCMD_INIT 	:= ""  // IMPORTANT! Shell command executed prior to all BigDataScript tasks (use this for setting environemts)
walltimeout 	:= 3600*24*100 // BigDataScript internal variable


init_base()
init_shell_env()
print_cmd_line_params() 


void init_base() { 

	out_dir = get_conf_val( out_dir, 	["out_dir"] )	
	no_par 	= get_conf_val_bool( no_par, 	["no_par"] )

	nth 	= get_conf_val_int( nth, 	["nth"] )
	wt 	= get_conf_val( wt, 		["wt"] )
	memory 	= get_conf_val( memory, 	["memory","mem"] )

	if ( cmd_line_arg_has_key("mem") ) memory = get_cmd_line_arg_val( "mem" )

	print("\n\n== general pipeline settings\n")
	print( "Output dir.\t\t: $out_dir\n" )
	print( "No parallel jobs\t: $no_par\n" )
	print( "# threads (general)\t: $nth\n" )
	print( "Walltime (general)\t: $wt\n" )
	print( "Max. memory (general)\t: $memory\n" )

	if ( use_sys_default ) {
		print( "System default resource settings will be used for walltime and max. memory!\n")
	}
}

void init_shell_env() {	

	init_mods 	:= ["/etc/profile.d/modules.sh", "/etc/profile.d/modules.bash"] // environment modules (bash) initialization file paths (pick from the first if exists)

	// get shell var MODULESHOME if exists
	MODULESHOME := get_shell_var("MODULESHOME").replace("\n","")
	if (MODULESHOME!="") init_mods.add("$MODULESHOME/init/bash")

	string shellcmd, module, path

	// find env. modules init script
	for ( string file : init_mods ) {
		if ( file.exists() ) {
			init_mod = file
			break
		}
	}

	if ( init_mod == "" ) {
		print("\n\nInfo: Environments module not found on your system (e.g. /etc/profile.d/modules.sh). Ignoring shell env. parameters like '-mod'. \n")
	}

	for( string k : conf.keys() ) {		
		string val = conf{k}	

		// concat. module
		if ( (k.indexOf("mod_")>=0) || (k=="mod") ) {

			if ( init_mod != "" ) {
				trimmed := val.trim().replace("module add ","").replace( ":", " " ).replace( ";", " " ).replace( ",", " " ).trim()
				trimmed = trimmed.replace( "   ", " ").replace( "  ", " ")
				module = module + " " + trimmed
			}
		}
		else if ( k.indexOf("shcmd")>=0 ) {

			shellcmd = shellcmd + " " + val + ";"
		}
		else if ( k.indexOf("addpath")>=0 ) {

			path = path + val.trim().replace(",",":").replace(";",":").replace(" ",":").replace(":::",":").replace("::",":") + ":"
		}
	}

	if ( mod!="" ) {
		string module_header = ". $init_mod;"

		if ( init_mod != "" ) { // if /etc/profile.d/modules.sh exists

			trimmed := mod.trim().replace("module add ","").replace( ":", " " ).replace( ";", " " ).replace(","," " ).trim()
			trimmed = trimmed.replace( "   ", " ").replace( "  ", " ")
			module = module + " " + trimmed
		}
	}
	if ( shcmd!="" ) {
		shellcmd = shellcmd + shcmd.trim() + "; "
	}

	if ( addpath!="" ) {
		path = path + addpath.trim().replace(",",":").replace(";",":").replace(" ",":").replace(":::",":").replace("::",":") + ":"
	}

	// finally concat all

	if ( module !="" ) {
		module = ". $init_mod; module add " + module + ";"
	}

	// check directories to add to PATH
	script_file_paths := get_script_file_paths()

	for ( string _path : script_file_paths ) {
		
		if ( _path.exists() ) {
			path = path + _path + ":"
		}
	}

	if ( path !="" ) {
		path = " export PATH=$path:\${PATH}:/bin:/usr/bin:/usr/local/bin:\${HOME}/.bds;"
	}

	// additional initialization
	SHCMD_INIT = SHCMD_INIT + module + path + shellcmd
	SHCMD_INIT = SHCMD_INIT.replace( ": :", ":" ).replace( "::", ":" )
	SHCMD_INIT = SHCMD_INIT.replace( "; ;", ";" ).replace( ";;", ";" )

	print( "\nShell cmd. for init.\t: $SHCMD_INIT\n" )
}

void print_cmd_line_params() {

	string line
	for ( string arg : args ) {
		line = line + arg + " "
	}

	if ( args.size() > 0 ) {

		print( "\nCommand line arguments\t: $line\n\n")

		//sys DATE=$(date "+%Y%m%d_%H%M%S"); echo $line > cmd_line_parameters.${DATE}.txt
	}
}

string get_rel_path( string path ) {

	rel_path := path.path().replace( out_dir.path(), "." )

	if ( rel_path == path.path() ) 	return ""
	else 				return rel_path
}

int parse_time_or_skip( string str ) {

	return (use_sys_default || is_system_local() || is_kundaje_lab()) ? -1 : parse_time( str )
}

int parse_mem_or_skip( string str ) {

	return (use_sys_default || is_system_local() || is_kundaje_lab()) ? -1 : parse_mem( str )
}

void wait_par() {
	if ( no_par ) wait //barrier for parallel tasks
}
