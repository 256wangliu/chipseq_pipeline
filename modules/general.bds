#!/usr/bin/env bds
#vim: syntax=java

include "conf.bds"


help == general pipeline settings
out_dir 	:= "out"	help Output directory (default: out).
title		:= ""		help Prefix for HTML report and outputs without given prefix.

help == parallelization settings
no_par		:= false	help Serialize all tasks (equivalent to '-nth 1', individual tasks can still use multiple threads).

help == general resource settings
nth 		:= 8 		help Maximum # threads for the pipeline. Use a big number for unlimited parallelization (default: 8).
wt 		:= "11h"	help Walltime for cluster jobs (example: 8:10:00, 3h, 3600, default: 11h, 11:00:00).
memory 		:= "12G"	help Maximum memory for cluster jobs (equivalent to '-mem', example: 4.5G, 1024M, default: 8G).
unlimited_mem_wt:= false 	help Use unlimited max. memory and walltime for a cluster engine.
use_system 	:= "" 		help Force to use a system (equivalent to 'bds -s [SYSTEM_NAME] ...', any system defined in bds.config can be used).

help == shell environment settings
mod 		:= ""		help Modules separated by ; (example: "bowtie/2.2.4; bwa/0.7.7; picard-tools/1.92").
shcmd 		:= ""		help Shell commands separated by ;. Shell var. must be written as ${VAR} not as $VAR (example: "export PATH=${PATH}:/usr/test; VAR=test"). 
addpath 	:= "" 		help Path separated by ; or : to be PREPENDED to \$PATH (example: "/bin/test:${HOME}/utils").
conda_env 	:= ""		help Anaconda Python environment name for all softwares including Python2.
conda_env_py3 	:= ""		help Anaconda Python environment name for Python3.


shcmd_init 	:= "" 	// Shell command executed prior to all BigDataScript tasks (use this for setting up shell environment)
shcmd_init_py3	:= "" 	// for softwares using python3

string[] tids_current 	// array of task ids currently running
int{} nth_tasks 	// key: task id, value: # of threads for the task


init_general()
init_shell_env()


void init_general() { 

	out_dir 	= get_conf_val( out_dir, 		["out_dir"] )		
	no_par 		= get_conf_val_bool( no_par, 		["no_par"] )
	nth 		= get_conf_val_int( nth, 		["nth"] )
	wt 		= get_conf_val( wt, 			["wt"] )
	memory 		= get_conf_val( memory, 		["memory","mem"] )
	unlimited_mem_wt= get_conf_val_bool( unlimited_mem_wt, 	["unlimited_mem_wt"] )
	conda_env	= get_conf_val( conda_env, 		["conda_env"] )
	conda_env_py3	= get_conf_val( conda_env_py3, 		["conda_env_py3"] )
	use_system 	= get_conf_val( use_system, 		["use_system"] )

	if ( cmd_line_arg_has_key("mem") ) memory = get_cmd_line_arg_val( "mem" )

	print_general()

	// cpus, mem and timeout are BDS variables for default resource settings
	cpus 		= 1
	mem 		= get_res_mem(memory)
	timeout 	= get_res_wt(wt)
	walltimeout 	= 3600*24*100 	// timeout var. in BigDataScript (100 days, jobs will never be stopped by BDS due to BDS timeout)
	if ( use_system != "" ) system 	= use_system
}

void print_general() {

	print("\n\n== general pipeline settings\n")
	print( "Output dir.\t\t\t: $out_dir\n" )
	print( "No parallel jobs\t\t: $no_par\n" )
	print( "Maximum # threads \t\t: $nth\n" )
	print( "Walltime (general)\t\t: $wt\n" )
	print( "Max. memory (general)\t\t: $memory\n" )
	print( "Env. for Anaconda python2\t: $conda_env\n" )
	print( "Env. for Anaconda python3\t: $conda_env_py3\n" )
	print( "Force to use a system\t: $use_system\n" )

	if ( unlimited_mem_wt ) {
		print( "Use limited max. memory and walltime (jobs will be submitted to a cluster engine without memory and walltime settings)\n")
	}
}

void init_shell_env() {

	init_mods 	:= ["/etc/profile.d/modules.sh", "/etc/profile.d/modules.bash"] // environment modules (bash) initialization file paths (pick from the first if exists)
	init_mod 	:= "" // module init. shell script found

	// get shell var MODULESHOME if exists
	moduleshome := get_shell_var("MODULESHOME").replace("\n","")
	if (moduleshome!="") init_mods.add("$moduleshome/init/bash")

	string shellcmd, module, path, conda_py2, conda_py3

	// find env. modules init script
	for ( string file : init_mods ) {
		if ( file.exists() ) {
			init_mod = file
			break
		}
	}

	if ( init_mod == "" ) {
		print("\n\nInfo: Environments module not found on your system (e.g. /etc/profile.d/modules.sh). Ignoring shell env. parameters like '-mod'. \n")
	}

	// read from conf./env. file
	for( string k : conf.keys() ) {		
		string val = conf{k}	

		// concat. module
		if ( (k.indexOf("mod_")>=0) || (k=="mod") ) {

			if ( init_mod != "" ) {
				trimmed := val.trim().replace("module add ","").replace( ":", " " ).replace( ";", " " ).replace( ",", " " ).trim()
				trimmed = trimmed.replace( "   ", " ").replace( "  ", " ")
				module = module + " " + trimmed
			}
		}
		else if ( k.indexOf("shcmd")>=0 ) {

			shellcmd = shellcmd + " " + val + ";"
		}
		else if ( k.indexOf("addpath")>=0 ) {

			path = path + val.trim().replace(",",":").replace(";",":").replace(" ",":").replace(":::",":").replace("::",":") + ":"
		}
	}

	// read from cmd. line arg.
	if ( mod!="" ) {
		string module_header = ". $init_mod;"

		if ( init_mod != "" ) { // if /etc/profile.d/modules.sh exists

			trimmed := mod.trim().replace("module add ","").replace( ":", " " ).replace( ";", " " ).replace(","," " ).trim()
			trimmed = trimmed.replace( "   ", " ").replace( "  ", " ")
			module = module + " " + trimmed
		}
	}
	if ( shcmd!="" ) {
		shellcmd = shellcmd + shcmd.trim() + "; "
	}

	if ( addpath!="" ) {
		path = path + addpath.trim().replace(",",":").replace(";",":").replace(" ",":").replace(":::",":").replace("::",":") + ":"
	}

	if ( module !="" ) {
		module = ". $init_mod; module add " + module + ";"
	}

	// check script directories to add to PATH
	script_file_paths := get_script_file_paths()

	for ( string _path : script_file_paths ) {
		
		if ( _path.exists() ) {
			path = path + _path + ":"
		}
	}

	if ( path !="" ) {
		path = " export PATH=$path:\${PATH}:/bin:/usr/bin:/usr/local/bin:\${HOME}/.bds;"
	}

	// add conda env
	if ( conda_env != "" ) {
		conda_py2 = "if [[ -f $(which activate) ]]; then source activate $conda_env; fi; "
	}

	if ( conda_env_py3 != "" ) {
		conda_py3 = "if [[ -f $(which activate) ]]; then source activate $conda_env_py3; fi; "
	}

	// additional initialization
	shcmd_init_ := module + path + shellcmd
	shcmd_init_ = shcmd_init_.replace( ": :", ":" ).replace( "::", ":" ).replace( "; ;", ";" ).replace( ";;", ";" )

	shcmd_init 	= conda_py2 + shcmd_init_
	shcmd_init_py3 	= conda_py3 + shcmd_init_

	print( "\nShell command for initialization\t: $shcmd_init\n" )
	print( "\nShell command for initialization (py3)\t: $shcmd_init_py3\n" )
}

string get_rel_path( string path ) {

	rel_path := path.path().replace( out_dir.path(), "." )

	if ( rel_path == path.path() ) 	return ""
	else 				return rel_path
}

int get_res_wt( string str ) {

	return (unlimited_mem_wt || is_system_local() ) ? -1 : parse_time( str )
}

int get_res_mem( string str ) {

	return (unlimited_mem_wt || is_system_local() ) ? -1 : parse_mem( str )
}

void wait_par( int nth_task ) {

	sleep( rand() + 0.5 )

	while ( true ) {
		
		tids_current_ := tids_current // make dummy for thread safety
		
		if ( tids_current_.size() == 0 ) break

		int nth_current // count # threads for currently going tasks
		for ( string tid : tids_current_ ) {
			if ( !tid.isDone() ) nth_current += nth_tasks{tid}
		}

		if ( no_par || (nth_current+nth_task) > nth ) {

			//print("\nWait... ( $nth_current+$nth_task > $nth ) ( size "+tids_current_.size()+", nth_curr $nth_current )\n")
			wait tids_current_

			tids_current = []

			sleep( rand()*5.0 + 0.5 )
		}
		else {
			break
		}
	}

	//print("\nStarting a new task : $nth_task \n")
}

void register_par( string tid, int nth_task ) {

	if ( tid == "" ) return
	//print("\nRegistering a task : "+ tid.isDone()+ " $tid, $nth_task \n")

	tids_current.add(tid)
	nth_tasks{tid} = nth_task
}