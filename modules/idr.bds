#!/usr/bin/env bds
#vim: syntax=java

include "species.bds"
include "report.bds"


help == idr settings
//use_idr1	:= false	help Force to use IDR-1 code (not recommended).
idr_thresh 	:= "0.02"	help IDR threshold : -log_10(score) (default: 0.02).


idr_summary 	:= "NPEAKS_IDR.txt"	// file basename for summary of number of peaks found


init_idr()


void init_idr() {

	//use_idr1 	= get_conf_val_bool( use_idr1, 		["use_idr1"] )
	idr_thresh 	= get_conf_val( idr_thresh, 		["idr_thresh"] )

	print("\n\n== idr settings\n")
	//print( "Use IDR-1\t\t: $use_idr1\n" )
	print( "IDR threshold\t\t: $idr_thresh\n" )
}

void chk_idr() {

	if ( !path_exists( blacklist_idr ) ) print("\nWarning: Blacklist bed (-blacklist_idr) for final IDR QC is missing! (file: $blacklist_idr)\n\n")
}

string[] _idr2( string peak1, string peak2, string pooled, string o_dir, string label ) {

	return _idr2( peak1, peak2, pooled, o_dir, label, "", "", "", "", "" )
}

string[] _idr2( string peak1, string peak2, string pooled, string o_dir, string label, \
		string graph_in1, string graph_in2, string graph_in3, string graph_out, \
		string hrchy_out ) {

	prefix 		:= "$o_dir/$label"
	npeaks_file 	:= prefix.dirName()+"/$idr_summary"
	peak_idr	:= "$prefix.IDR"+"$idr_thresh.narrowPeak.gz"
	idr_output 	:= "$prefix.overlapped-peaks.txt"
	png 		:= "$prefix.overlapped-peaks.txt.png"
	create_idr_summary( npeaks_file ) // do nothing if it already exists

	in 	:= [peak1, peak2, pooled]
	//out 	:= [idr_output, peak, png]
	out 	:= [peak_idr, png, idr_output]

	taskName:= "idr2 " + label

	task( out<-in ) {
		
		sys $shcmd_init_py3

		sys idr --samples $peak1 $peak2 --peak-list $pooled --input-file-type narrowPeak \
			--output-file $idr_output --rank signal.value --soft-idr-threshold $idr_thresh \
			--plot
		
		sys idr_thresh_transformed=$(awk -v p=$idr_thresh 'BEGIN{print -log(p)/log(10)}')

		//# Get peaks passing global IDR threshold and convert file to narrowPeak format (Step 9)
		sys awk 'BEGIN{OFS="\t"} $12>='"${idr_thresh_transformed}"' {print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,"0"}' $idr_output \
			| sort | uniq | sort -k7n,7n | gzip -c > $peak_idr

		sys echo -e "$label\t$(zcat $peak_idr | wc -l)" >> $npeaks_file
	}

	wait_par()

	_add_to_graphviz( [graph_in1, graph_in2, graph_in3], [peak1, peak2, pooled], \
			  [graph_out], [peak_idr], "idr_($label)", grp_color_idr )

	_add_to_filetable( [hrchy_out], [peak_idr] )

	return out
}

string _filter_idr_peak( string idr_peak, string o_dir, string label ) {

	prefix 	:= replace_dir( rm_ext( idr_peak, ["narrowPeak"] ), o_dir )
	filt 	:= "$prefix.filt.narrowPeak.gz"

	in 	:= [idr_peak]
	out 	:= filt

	taskName:= "filter_idr_peak " + label

	task( out<-in ) {

		sys $shcmd_init

		sys bedtools intersect -v -a $idr_peak -b $blacklist_idr | gzip -c > $filt
	}

	wait_par()

	return out
}

string[] _idr_final_qc( string idr_tr, string idr_pr_rep1, string idr_pr_rep2, string idr_ppr, string o_dir, string label ) {

	return _idr_final_qc( idr_tr, idr_pr_rep1, idr_pr_rep2, idr_ppr, o_dir, label, \
				"idr_peak_(true)","idr_peak_(rep1-pr)","idr_peak_(rep2-pr)","idr_peak_(ppr)", \
				"idr_qc","idr_peak_(opt)","idr_peak_(consv)", \
				"L1_peak/idr/idr_qc","L1_peak/idr/opt_set/idr_peak","L1_peak/idr/consv_set/idr_peak" )
}

string[] _idr_final_qc( string idr_tr, string idr_pr_rep1, string idr_pr_rep2, string idr_ppr, string o_dir, string label, \
			string graph_in1, string graph_in2, string graph_in3, string graph_in4, \
			string graph_out1, string graph_out2, string graph_out3, \
			string hrchy_out1, string hrchy_out2, string hrchy_out3 ) {

	string idr_tr_filt, idr_ppr_filt

	string remarks

	if ( path_exists( blacklist_idr ) ) {
		
		idr_tr_filt 	= _filter_idr_peak( idr_tr, "", "true" )
		idr_ppr_filt 	= _filter_idr_peak( idr_ppr, "", "ppr" )
		wait

		remarks		= "filtered tr and ppr"
	}
	else {
		idr_tr_filt 	= idr_tr
		idr_ppr_filt 	= idr_ppr

		remarks		= "no blacklist"
	}

	// compute IDR scores

	Nt :=  get_no_lines( idr_tr_filt )
	N1 :=  get_no_lines( idr_pr_rep1 ) 
	N2 :=  get_no_lines( idr_pr_rep2 )
	Np :=  get_no_lines( idr_ppr_filt )

	optimal_set := (Nt > Np) ? "true_rep" : "pooled_pseudo_rep"
	idr_opt_set := (Nt > Np) ? idr_tr_filt : idr_ppr_filt

	conservative_set := "true_rep"
	idr_consv_set  	 := idr_tr_filt

	real max_Np_Nt = max( Np, Nt )
	real min_Np_Nt = min( Np, Nt )

	real max_N1_N2 = max( N1, N2 )
	real min_N1_N2 = min( N1, N2 )

	rescue_ratio 		:= max_Np_Nt / min_Np_Nt
	self_consistency_ratio 	:= max_N1_N2 / min_N1_N2
	reproducibility 	:= 1
	
	if ( rescue_ratio > 2.0 || self_consistency_ratio > 2.0 ) reproducibility = 0 // BORDERLINE
	if ( rescue_ratio > 2.0 && self_consistency_ratio > 2.0 ) reproducibility = -1 // FAIL
	
	// 4f. Fraction of Reads in Peaks (FRiP) will be added later

	// filenames
	qc 	:= "$o_dir/IDR_final.qc"


	in 	:= [idr_tr, idr_pr_rep1, idr_pr_rep2, idr_ppr]
	out 	:= qc

	taskName:= "idr final qc" + label

	task( out<-in ) {

		sys $shcmd_init

		sys echo -e "Nt\tN1\tN2\tNp\tconservative_set\toptimal_set\trescue_ratio\tself_consistency_ratio\treproducibility\tremarks" > $qc
		sys echo -e "$Nt\t$N1\t$N2\t$Np\t$conservative_set\t$optimal_set\t$rescue_ratio\t$self_consistency_ratio\t$reproducibility\t$remarks" >> $qc
	}

	wait_par()

	_add_to_graphviz( [graph_in1, graph_in2, graph_in3, graph_in4], [idr_tr,idr_pr_rep1,idr_pr_rep2,idr_ppr], \
			  [graph_out1, graph_out2, graph_out3], [qc,idr_opt_set, idr_consv_set], \
			  "idr\\nfinal\\nqc", "pink" )

	_add_to_filetable( [hrchy_out1, hrchy_out2, hrchy_out3], [qc,idr_opt_set, idr_consv_set] )

	//return out
	return [qc, idr_opt_set, idr_consv_set]
}

void create_idr_summary( string file ) { // create it if not exists	

	if ( !file.exists() ) file.write( "Sample type\tNumber of peaks\n" )
}
