#!/usr/bin/env bds

include "species.bds"

// has functions related to bam, and helps getting bam from configruation file or command line argument

help Bam definition
help      Single-ended : To define bam use '-bam[REP_NO]', For control use '-ctl_bam[REP_NO]'
help      Paired end : To define bam use '-bam[REP_NO] -bam[REP_NO]_PE', For control use '-ctl_bam[REP_NO]_[REP_NO] -ctl_bam[REP_NO]_PE'


string get_bam( int ctl, int rep ) {

	key := ( ctl > 0 ? "ctl_bam" : "bam" ) + "_rep" + rep
	key2 := ( ctl > 0 ? "ctl_bam" : "bam" ) + rep
	key3 := ( ctl > 0 ? "ctl_bam" : "bam" )

	if ( cmd_line_arg_has_key( key ) ) {
		return get_cmd_line_arg_val( key )
	}
	else if ( cmd_line_arg_has_key( key2 ) ) {
		return get_cmd_line_arg_val( key2 )
	}
	else if ( (rep==1) && cmd_line_arg_has_key( key3 ) ) {
		return get_cmd_line_arg_val( key3 )
	}
	else if ( conf.hasKey( key ) ) {
		return get_path( conf{ key } )
	}
	else if ( conf.hasKey( key2 ) ) {
		return get_path( conf{ key2 } )
	}
	else if ( (rep==1) && conf.hasKey( key3 ) ) {
		return get_path( conf{ key3 } )
	}
	return ""
}

bool is_bam_paired_end( int ctl, int rep ) {

	key := ( ctl > 0 ? "ctl_bam" : "bam" ) + rep + "_pe"
	key_wo_rep := ( ctl > 0 ? "ctl_bam" : "bam" ) + "_pe"

	if ( cmd_line_arg_has_key( key ) ) {
		val := get_cmd_line_arg_val( key )
		return (val=="") || (val.parseBool())
	}
	else if ( (rep==1) && cmd_line_arg_has_key( key_wo_rep ) ) {
		val := get_cmd_line_arg_val( key_wo_rep )
		return (val=="") || (val.parseBool())
	}	
	else if ( conf.hasKey( key ) ) {
		return conf{ key }.parseBool()
	}
	else if ( (rep==1) && conf.hasKey( key_wo_rep ) ) {
		return conf{ key_wo_rep }.parseBool()
	}

	return false
}

bool is_bam_single_ended( int ctl, int rep ) {

	return !is_bam_paired_end( ctl, rep )
}

bool is_bam_PE( int ctl, int rep ) {

	return is_bam_paired_end( ctl, rep )
}

bool is_bam_SE( int ctl, int rep ) {

	return is_bam_single_ended( ctl, rep )
}

int get_num_rep_bam() {

	rep := 1

	while( get_bam( 0, rep ) != "" ) rep++

	return rep-1
}