#!/usr/bin/env bds
#vim: syntax=java

include "species.bds"
include "report_graphviz.bds"


// has functions related to tagalign, and helps getting tagalign from configruation file or command line argument

help == postalign bed/tagalign settings
nreads 		:= 15000000	help # reads to be subsampled for cross corr. analysis (default: 15000000).
fraglen0        := false        help Set predefined fragment length as zero for cross corr. analysis (add -speak=0 to run_spp.R).


init_postalign_bed()


void init_postalign_bed() {

	nreads 		= get_conf_val_int( nreads,		["nreads"] )

	print("\n\n== postalign bed/tagalign settings\n")
	print( "# read for xcor subsample\t: $nreads\n")
}

string _subsample_tag( string tag, string o_dir, string label ) {

	return _subsample_tag( tag, o_dir, label, \
				"tagalign\\n($label)", "subsampled\\ntagalign\\n($label)")
}

string _subsample_tag( string tag, string o_dir, string label, string label_in, string label_out ) {

	prefix 		:= replace_dir( rm_ext( tag, ["tagAlign","tag","bed"] ), o_dir )
	nreads_per_mill := (nreads/1000000)
	subsampled_tag 	:= "$prefix.$nreads_per_mill.tagAlign.gz"

	in 	:= [ tag ]
	out 	:= subsampled_tag

	taskName:= "_subsample_tag " + label

	task( out<-in ) {

		sys $shcmd_init
	
		//# Subsample tagAlign file
		sys zcat $tag | \
			grep -v "chrM" | shuf -n $nreads | gzip -c > $subsampled_tag
	}

	wait_par()

	_add_to_graphviz( [label_in], [tag], [label_out], [subsampled_tag] )

	return out
}

// This function is for cross correlation analysis in chipseq pipeline only for paired end data set
// Output (subsampled) tagalign will restricted to one read end per pair
string _subsample_tag_PE( string tag, string o_dir, string label ) {

	return _subsample_tag_PE( tag, o_dir, label, \
				"tagalign\\n($label)", "subsampled\\ntagalign\\n($label)" )
}

string _subsample_tag_PE( string tag, string o_dir, string label, \
				string label_in, string label_out ) {
	
	prefix 		:= replace_dir( rm_ext( tag, ["tagAlign","bed"] ), o_dir )
	nreads_per_mill := (nreads/1000000)
	subsampled_tag 	:= "$prefix.$nreads_per_mill.tagAlign.gz"

	in 	:= [ tag ]
	out 	:= subsampled_tag

	taskName:= "_subsample_tag_PE " + label

	task( out<-in ) {

		sys $shcmd_init

		// join two consecutive lines in tag, subsample it and then take one read per pair
		sys zcat $tag | sed 'N;s/\n/\t/' | \
			grep -v "chrM" | shuf -n $nreads | \
			awk 'BEGIN{OFS="\t"}{print $1,$2,$3,$4,$5,$6}' | gzip -c > $subsampled_tag
	}

	wait_par()

	_add_to_graphviz( [label_in], [tag], [label_out], [subsampled_tag] )

	return out
}

// This function is for cross correlation analysis in chipseq pipeline only for paired end data set
// Output (subsampled) tagalign will restricted to one read end per pair
string _subsample_bedpe_to_tag( string bedpe, string o_dir, string label ) {

	return _subsample_bedpe_to_tag( bedpe, o_dir, label, \
					"bedpe\\n($label)", "subsampled\\ntagalign\\n($label)" )
}

string _subsample_bedpe_to_tag( string bedpe, string o_dir, string label, \
				string label_in, string label_out ) {
	
	prefix 		:= replace_dir( rm_ext( bedpe, ["bedpe","bed"] ), o_dir )
	nreads_per_mill := (nreads/1000000)
	subsampled_tag 	:= "$prefix.$nreads_per_mill.tagAlign.gz"

	in 	:= [ bedpe ]
	out 	:= subsampled_tag
	taskName:= "subsample_bedpe2tag" + label

	task( out<-in ) {

		sys $shcmd_init

		//# Subsample tagAlign file
		//# Restrict to one read end per pair for CC analysis
		sys zcat $bedpe | \
			grep -v "chrM" | shuf -n $nreads | \
			awk 'BEGIN{OFS="\t"}{print $1,$2,$3,"N","1000",$9}' | gzip -c > $subsampled_tag
	}

	wait_par()

	_add_to_graphviz( [label_in], [bedpe], [label_out], [subsampled_tag] )

	return out
}

string _subsample_bedpe( string bedpe, string o_dir, string label ) {
	
	prefix 		:= replace_dir( rm_ext( bedpe, ["bedpe","bed"] ), o_dir )
	nreads_per_mill := (nreads/1000000)
	subsampled_bedpe:= "$prefix.$nreads_per_mill.bedpe.gz"

	in 	:= [ bedpe ]
	out 	:= subsampled_bedpe

	taskName:= "subsample_bedpe " + label

	task( out<-in ) {

		sys $shcmd_init

		sys zcat $bedpe | grep -v "chrM" | shuf -n $nreads | gzip -c > $subsampled_bedpe
	}

	wait_par()

	return out
}

// Adjusts the read-ends in a read BED by Tn5 offsets
string _shift_tag( string tag, string o_dir, string label ) {
	
	prefix 		:= replace_dir( rm_ext( tag, ["tagAlign","tag","bed"] ), o_dir )
	//shifted_tag 	:= "$prefix.shifted.tagAlign.gz"
	shifted_tag 	:= "$prefix.tn5.tagAlign.gz"

	in 	:= [ tag ]
	out 	:= shifted_tag

	taskName:= "shift_tag " + label

	task( out<-in ) {

		sys $shcmd_init

		sys zcat $tag | awk -F $'\t' 'BEGIN {OFS = FS}{ if ($6 == "+") {$2 = $2 + 4} else if ($6 == "-") {$3 = $3 - 5} print $0}' | gzip -c > $shifted_tag
	}

	wait_par()

	return out
}

string[] _xcor( string tag, string o_dir, string label ) {

	return _xcor( tag, o_dir, label, "tagalign\\n($label)", "xcor_qc\\n($label)" )
}

string[] _xcor( string tag, string o_dir, string label, string label_in, string label_out ) {

	// misc.
	prefix 		:= replace_dir( rm_ext( tag, ["tagAlign","tag","bed"] ), o_dir )
	xcor_score 	:= "$prefix.cc.qc"
	xcor_plot 	:= "$prefix.cc.plot.pdf"
        param_speak     := fraglen0 ? "-speak=0" : ""

	in 	:= [ tag ]
	out 	:= [ xcor_score, xcor_plot ]

	taskName:= "xcor " + label

	task( out<-in ) {

		sys $shcmd_init_r2

		//# CCSCORE FILE format
		//# Filename <tab> numReads <tab> estFragLen <tab> correstFragLen <tab> PhantomPeak <tab> corrphantomPeak <tab> argmincorr <tab> mincorr <tab> phantomPeakCoef <tab> relPhantomPeakCoef <tab> QualityTag
		sys Rscript $(which run_spp_nodups.R) -rf \
			-c=$tag -p=1 \
			-filtchr=chrM -savp=$xcor_plot -out=$xcor_score $param_speak
		sys sed -r 's/,[^\t]+//g' $xcor_score > $xcor_score.tmp
		sys mv $xcor_score.tmp $xcor_score
	}

	wait_par()

	_add_to_graphviz( [label_in], [tag], [label_out], [xcor_score], "cross-corr.\\n($label)", grp_color_xcor )

	return out
}

// make spr(self_pseudo_replicate)

string[] _spr( string tag, string o_dir, string label ) {

	return _spr( tag, o_dir, label, "tagalign\\n($label)", "tagalign pr1\\n($label)","tagalign pr2\\n($label)" ) 
}

string[] _spr( string tag, string o_dir, string label, string label_in, string label_out1, string label_out2 ) {
	
	prefix 	:= replace_dir( rm_ext( tag, ["tagAlign","tag","bed"] ), o_dir )
	tag_pr1	:= "$prefix.pr1.tagAlign.gz"
	tag_pr2	:= "$prefix.pr2.tagAlign.gz"

	in 	:= [ tag ]
	out 	:= [ tag_pr1, tag_pr2 ]

	taskName:= "spr " + label

	task( out<-in ) {

		sys $shcmd_init

		//# Get total number of read pairs
		sys nlines=$( zcat $tag | wc -l )
		sys nlines=$(( (nlines + 1) / 2 ))
		
		//# Shuffle and split BEDPE file into 2 equal parts
		//# Will produce $PR_PREFIX00 and $PR_PREFIX01
		sys zcat $tag | shuf | split -d -l $((nlines)) - $prefix.

		//# Convert read pairs to reads into standard tagAlign file
		sys gzip -c $prefix.00 > $tag_pr1
		sys rm -f $prefix.00
		sys gzip -c $prefix.01 > $tag_pr2
		sys rm -f $prefix.01
	}

	wait_par()

	_add_to_graphviz( [label_in], [tag], [label_out1, label_out2], [tag_pr1,tag_pr2] )

	return out
}

string[] _spr_PE( string bedpe, string o_dir, string label ) {

	return _spr_PE( bedpe, o_dir, label, \
			"bedpe\\n($label)", "tagalign pr1\\n($label)", "tagalign pr2\\n($label)" )
}

string[] _spr_PE( string bedpe, string o_dir, string label, \
			string label_in, string label_out1, string label_out2 ) {
	
	prefix 	:= replace_dir( rm_ext( bedpe, ["bedpe","bed","tagAlign"] ), o_dir )

	tag_pr1	:= "$prefix.pr1.tagAlign.gz"
	tag_pr2	:= "$prefix.pr2.tagAlign.gz"

	in 	:= [ bedpe ]
	out 	:= [ tag_pr1, tag_pr2 ]

	taskName:= "spr_PE " + label

	task( out<-in ) {

		sys $shcmd_init

		//# Get total number of read pairs
		sys nlines=$( zcat $bedpe | wc -l )
		sys nlines=$(( (nlines + 1) / 2 ))

		//# Shuffle and split BEDPE file into 2 equal parts
		//# Will produce $PR_PREFIX00 and $PR_PREFIX01
		sys zcat $bedpe | shuf | split -d -l $((nlines)) - $prefix.  

		//# Convert read pairs to reads into standard tagAlign file
		sys awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\tN\t1000\t%s\n%s\t%s\t%s\tN\t1000\t%s\n",$1,$2,$3,$9,$4,$5,$6,$10}' "$prefix.00" | \
			gzip -c > $tag_pr1
		sys rm -f $prefix.00
		sys awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\tN\t1000\t%s\n%s\t%s\t%s\tN\t1000\t%s\n",$1,$2,$3,$9,$4,$5,$6,$10}' "$prefix.01" | \
			gzip -c > $tag_pr2
		sys rm -f $prefix.01
	}
	
	wait_par()

	_add_to_graphviz( [label_in], [bedpe], [label_out1, label_out2], [tag_pr1,tag_pr2] )

	return out
}

string[] _spr_tag_PE( string tag, string o_dir, string label ) {

	return _spr_tag_PE( tag, o_dir, label, \
				"tagalign\\n($label)", "tagalign pr1\\n($label)", "tagalign pr2\\n($label)" )
}

string[] _spr_tag_PE( string tag, string o_dir, string label, \
			string label_in, string label_out1, string label_out2 ) {
	
	prefix 	:= replace_dir( rm_ext( tag, ["bed","tagAlign"] ), o_dir )

	joined 	:= "$prefix.joined" // temporary file

	tag_pr1	:= "$prefix.pr1.tagAlign.gz"
	tag_pr2	:= "$prefix.pr2.tagAlign.gz"

	in 	:= [ tag ]
	out 	:= [ tag_pr1, tag_pr2 ]

	taskName:= "spr_tag_PE " + label

	task( out<-in ) {

		sys $shcmd_init

		// join consecutive two lines into one
		sys zcat $tag | sed 'N;s/\n/\t/' > $joined

		//# Get total number of read pairs
		sys nlines=$( cat $joined | wc -l )
		sys nlines=$(( (nlines + 1) / 2 ))

		//# Shuffle and split temporary combined file into 2 equal parts
		//# Will produce $PR_PREFIX00 and $PR_PREFIX01
		sys cat $joined | shuf | split -d -l $((nlines)) - $prefix.  

		//# Convert read pairs to reads into standard tagAlign file
		sys awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\t%s\t%s\t%s\n%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12}' "$prefix.00" | \
			gzip -c > $tag_pr1
		sys rm -f $prefix.00
		sys awk 'BEGIN{OFS="\t"}{printf "%s\t%s\t%s\t%s\t%s\t%s\n%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12}' "$prefix.01" | \
			gzip -c > $tag_pr2
		sys rm -f $prefix.01

		//sys rm -f $joined
	}
	
	wait_par()

	_add_to_graphviz( [label_in], [tag], [label_out1, label_out2], [tag_pr1,tag_pr2] )

	return out
}

// make ppr(pooled pseudo replicate)
string[] _ppr( string tag1, string tag1_pr1, string tag1_pr2, string tag2, string tag2_pr1, string tag2_pr2, string o_dir, string label ) {
	
	tag_pooled 	:= _pool_tag( tag1, tag2, o_dir, label )
	tag_ppr1 	:= _pool_tag( tag1_pr1, tag2_pr1, o_dir, label+"_ppr1" )
	tag_ppr2 	:= _pool_tag( tag1_pr2, tag2_pr2, o_dir, label+"_ppr2" )

	out 	:= [ tag_pooled, tag_ppr1, tag_ppr2 ]

	wait_par()

	_add_to_graphviz( ["tagalign\\n(rep1)","tagalign\\n(rep2)"], [tag1,tag2], \
			  ["tagalign\\n(pooled)"], [tag_pooled] )

	_add_to_graphviz( ["tagalign pr1\\n(rep1)","tagalign pr2\\n(rep2)"], [tag1_pr1,tag2_pr1], \
			  ["tagalign\\n(ppr1)"], [tag_ppr1] )

	_add_to_graphviz( ["tagalign pr2\\n(rep1)","tagalign pr2\\n(rep2)"], [tag1_pr2,tag2_pr2], \
			  ["tagalign\\n(ppr2)"], [tag_ppr2] )

	return out
}

string _pool_tag( string tag1, string tag2, string o_dir, string label ) {

// LINUX has limit on filename length (255), make it as shorter as possible
//	prefix 		:= "$o_dir/" + concat_basename_wo_ext( tag1, tag2, ["tagAlign","tag","bed"] )	
	prefix 		:= replace_dir( rm_ext( tag1, ["bed","tagAlign"] ), o_dir )	

	tag_pooled 	:= "$prefix"+"_pooled.tagAlign.gz"

	in 	:= [ tag1, tag2 ]
	out 	:= tag_pooled

	taskName:= "pool_tag " + label

	task( out<-in ) {

		sys $shcmd_init
		sys zcat $tag1 $tag2 | gzip -c > $tag_pooled		
	}

	wait_par()

	return out
}

string get_fraglen( string xcor_score ) {   // get FRAGLEN (3rd column of cc score file) for spp(-speak=$FRAGLEN)	

	cols := xcor_score.read().split("\t")
	return cols[2]
}
