#!/usr/bin/env bds

include "general.bds"

// sub module: report

url_base 	:= "" 		help URL base for output directory.



// bwa logs (*.flagstat.qc)
// 1 table
string _html_flagstat( string id, string[] header, string[] logs ) {

	html := "<div id='$id'>"

	html += "</div>"

	return html
}

// MarkDuplicate (post-align) logs (*.dup.qc)
// 1 table
string _html_dup( string id, string[] header, string[] logs ) {

	html := "<div id='$id'>"

	html += "</div>"

	return html
}

// Library complexcity (post-align) logs (*.pbc.qc)
// 1 table
string _html_pbc( string id, string[] header, string[] logs ) {

	html := "<div id='$id'>"

	html += "</div>"

	return html
}

// Cross correlation analysis log (*.cc.qc)
// 1 table + img (png converted from pdf)
string _html_xcor( string id, string[] header, string[] logs, string[] pdfs ) {

	string[] pngs


	html := "<div id='$id'>"

	html += "</div>"

	return html
}

// IDR logs
// 1 table
string _html_idr( string id, string[] header, string[] logs ) {

	html := "<div id='$id'>"

	html += "</div>"

	return html
}


// WashU Epigenome browser datahub (json format)
string _epigenome_browser_datahub( string[] files, string[] types, string[] tracknames ) {

	height_row_bigwig := 30 // bigwig track height

	string json := "{\n"

	for ( int i=0; i<files.size(); i++ ) {

		file := files[i]
		type := types[i]
		trackname := tracknames[i]

		// find output directory and remove it from file path		
		file_path = file.path().replace( out_dir.path(), "" )

		url 	:= url_base + file_path 	// add url_base

		// guess data type from file extension (*.narrowPeak.gz, *.bw, *.bigwig )	
		// narrowPeak.gz must be converted to hammock type (browser specific format)	

		if ( type == "bigwig ") {
			
			json 	+= 	"{ 'type': 'bigwig', 'name': '$trackname', 'url': '$url', 'mode': 1," + \
					"  'qtc' : { 'height': height_row_bigwig, 'summeth':2," + \
					"            'pr': pr, 'pg': pg, 'pb': pb, 'smooth':3," + \
					"            'thtype'=1, 'thmin'=2, 'thmax'=40 } };\n\n"
		}
	}

	// add native tracks (ref genome)
	//species

	json += "\n}\n"

	return json
}

string _pdf_to_png( string pdf ) { 

	png 	:= remove_ext( pdf, "pdf" ) + ".png"

	// Requirements: poppler-utils (sudo apt-get install poppler-utils)
	sys pdftoppm -png $pdf > $png

	return png
}

void _write_report( string title, string report_file, string root ) {

	print("\n====== Generating reports (out: $report_file) \n")

	html_header := 	"<html> <head> <title>"+ title+"</title> </head> <body> <h1>" + title + "</h1>\n"
	html_footer := "\n</body></html>\n"

	string[] report_contents

	report_contents.push( html_header )

	// recursively find all files for report (png, pdf, txt, qc, ccscores)
	_write_files_to_report( root, report_contents )

	report_contents.push( html_footer )

	report_file.write( array_to_str( report_contents ) )	
}
