#!/usr/bin/env bds
#vim: syntax=java

include "species.bds"


help == signal track generation settings (requirements: -umap -chrsz -seq)
param_bam_cvrg 	:= "--normalizeTo1x 2451960000 --missingDataAsZero no --centerReads -f 150 -bs 10"	help Parameters for deepTools bigwig generation from filt_bam (default: "--normalizeTo1x 2451960000 --missingDataAsZero no --centerReads -f 150 -bs 10").
//help *resources :
nth_bam_cvrg	:= 3 		help # threads for bamCoverage (deepTools) (default: 3).
wt_bam_cvrg	:= "5h"		help Walltime for bamCoverage (deepTools) (default: 5h, 5:00:00).
mem_bam_cvrg	:= "8G" 	help Max. memory for bamCoverage (deepTools) (default: 8G).


init_signal()


void init_signal() {

	param_bam_cvrg	= get_conf_val( param_bam_cvrg, 	["param_bam_cvrg"] )
	nth_bam_cvrg 	= get_conf_val_int( nth_bam_cvrg,	["nth_bam_cvrg"] )
	wt_bam_cvrg 	= get_conf_val( wt_bam_cvrg, 		["wt_bam_cvrg"] )
	mem_bam_cvrg 	= get_conf_val( mem_bam_cvrg, 		["mem_bam_cvrg"] )

	print("\n\n== signal track generation settings\n")
	print( "Param. for bamCoverage (deeptools)\t: $param_bam_cvrg\n")
	print( "# threads (bam_cvrg)\t: $nth_bam_cvrg\n")
	print( "Walltime (bam_cvrg)\t: $wt_bam_cvrg\n")
	print( "Max. memory (bam_cvrg)\t: $mem_bam_cvrg\n")
}

void chk_signal_aln2rawsig() {

	if ( !path_exists( "$umap/chr1.uint8.unique" ) ) error("Unique mappability (-umap) directory doesn't exists! (file: $umap/chr1.uint8.unique)\n")
	if ( !path_exists( chrsz ) ) error("Chromosome size file (-chrsz) is missing or doesn't exists! (file: $chrsz)")
	if ( !path_exists( "$seq/chr1.fa") ) error("\nReference genome sequence directory doesn't exists! (file: $seq/chr1.fa)\n")
}

string _tag_to_bw( string tag, string fraglen, string o_dir, string label ) {

	return _tag_to_bw( tag, fraglen, o_dir, label, "tagalign\\n($label)", "signal tag2bw\\n($label)" )
}

string _tag_to_bw( string tag, string fraglen, string o_dir, string label, string label_in, string label_out ) {
	
	prefix 	:= replace_dir( rm_ext( tag, ["tagAlign","tag","bed"] ), o_dir )
	bigwig 	:= "$prefix.bigwig"

	in 	:= [tag]
	out 	:= bigwig

	if ( out <- in ) { // if bigwig is newer than tag

		bedgraph := _tag_to_bdg( tag, fraglen, o_dir, label )
		wait

		bigwig  = _bdg_to_bw( bedgraph, o_dir, label )
		wait

		bedgraph.rm()
	}

	_add_to_graphviz( [label_in], [tag], [label_out], [bigwig], "align2rawsignal\\n($label)", grp_color_sigtrk )

	return out
}

string _tag_to_bdg( string tag, string fraglen, string o_dir, string label ) {

	prefix 		:= replace_dir( rm_ext( tag, ["tag", "tagAlign", "bed"] ), o_dir )
	bedgraph 	:= "$prefix.bedgraph"
	
	in 	:= [ tag ]
	out 	:= bedgraph

	taskName:= "tag to bdg a2rs "+label

	task( out<-in ) {

		sys $shcmd_init

		sys align2rawsignal -i=$tag -o=$bedgraph -s=$seq -u=$umap -of=bg -l=$fraglen -mm=4
	}

	wait_par()

	return out
}

string _bdg_to_bw( string bedgraph, string o_dir, string label ) {

	prefix 		:= replace_dir( rm_ext( bedgraph, ["bed", "bedgraph", "bg"] ), o_dir )
	bedgraph 	:= "$prefix.bedgraph"
	sorted_bg 	:= "$prefix.srt.bedgraph"
	bigwig 		:= "$prefix.bigwig"
	
	in 	:= [ bedgraph ]
	out 	:= bigwig

	taskName:= "bdg to bw "+label

	task( out<-in ) {

		sys $shcmd_init
		
		sys sort -k1,1 -k2,2n $bedgraph > $sorted_bg

		sys bedGraphToBigWig $sorted_bg $chrsz $bigwig
		sys rm -f $sorted_bg
	}

	wait_par()

	return out
}

string _tag_to_wig( string tag, string fraglen, string o_dir, string label ) {

	prefix 	:= replace_dir( rm_ext( tag, ["tag", "tagAlign", "bed"] ), o_dir )
	wig 	:= "$prefix.wig"
	
	in 	:= [ tag ]
	out 	:= wig

	taskName:= "tag to wig a2rs "+label

	task( out<-in ) {

		sys $shcmd_init

		sys align2rawsignal -i=$tag -o=$wig -s=$seq -u=$umap -of=wig -l=$fraglen -mm=4
	}

	wait_par()

	return out
}

string _bam_to_bw( string filt_bam, string o_dir, string label ) { // deeptools

	return _bam_to_bw( filt_bam, o_dir, label, "filt_bam\\n($label)", "signal bam2bw\\n\\n($label)" )
}

string _bam_to_bw( string filt_bam, string o_dir, string label, string label_in, string label_out ) { // deeptools

	prefix 	:= replace_dir( rm_ext( filt_bam, ["bam"] ), o_dir )
	bigwig 	:= "$prefix.bam2bw.bigwig"
	
	in 	:= [ filt_bam ]
	out 	:= bigwig

	taskName:= "bam cvrg " + label
	cpus 	:= nth_bam_cvrg;	mem := get_res_mem(mem_bam_cvrg);	timeout := get_res_wt(wt_bam_cvrg)

	task( out<-in ) {

		sys $shcmd_init

		sys bamCoverage -v -b $filt_bam -o $bigwig -of bigwig -p $nth_bam_cvrg $param_bam_cvrg
	}

	wait_par()

	_add_to_graphviz( [label_in], [filt_bam], [label_out], [bigwig], "deepTools\\n bamCoverage\\n($label)", grp_color_sigtrk )

	return out
}
